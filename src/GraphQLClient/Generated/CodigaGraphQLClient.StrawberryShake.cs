// <auto-generated/>
#nullable enable

namespace GraphQLClient
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetFileDataResult : global::System.IEquatable<GetFileDataResult>, IGetFileDataResult
    {
        public GetFileDataResult(global::GraphQLClient.IGetFileData_Project? project)
        {
            Project = project;
        }

        public global::GraphQLClient.IGetFileData_Project? Project { get; }

        public virtual global::System.Boolean Equals(GetFileDataResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Project is null && other.Project is null) || Project != null && Project.Equals(other.Project)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFileDataResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Project != null)
                {
                    hash ^= 397 * Project.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A project
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetFileData_Project_Project : global::System.IEquatable<GetFileData_Project_Project>, IGetFileData_Project_Project
    {
        public GetFileData_Project_Project(global::System.Int64 id, global::System.String name, global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetFileData_Project_Analyses> analyses)
        {
            Id = id;
            Name = name;
            Analyses = analyses;
        }

        /// <summary>
        /// identifier of the project
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// name of the project
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// list of all analyses
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetFileData_Project_Analyses> Analyses { get; }

        public virtual global::System.Boolean Equals(GetFileData_Project_Project? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Name.Equals(other.Name) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Analyses, other.Analyses);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFileData_Project_Project)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                foreach (var Analyses_elm in Analyses)
                {
                    hash ^= 397 * Analyses_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// An analysis object
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetFileData_Project_Analyses_Analysis : global::System.IEquatable<GetFileData_Project_Analyses_Analysis>, IGetFileData_Project_Analyses_Analysis
    {
        public GetFileData_Project_Analyses_Analysis(global::System.Int64 id, global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetFileData_Project_Analyses_Violations> violations, global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetFileData_Project_Analyses_LongFunctions> longFunctions, global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetFileData_Project_Analyses_ComplexFunctions> complexFunctions, global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetFileData_Project_Analyses_Duplicates> duplicates)
        {
            Id = id;
            Violations = violations;
            LongFunctions = longFunctions;
            ComplexFunctions = complexFunctions;
            Duplicates = duplicates;
        }

        /// <summary>
        /// identifier of the analysis
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// violations for this analysis
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetFileData_Project_Analyses_Violations> Violations { get; }

        /// <summary>
        /// complex functions
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetFileData_Project_Analyses_LongFunctions> LongFunctions { get; }

        /// <summary>
        /// complex functions
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetFileData_Project_Analyses_ComplexFunctions> ComplexFunctions { get; }

        /// <summary>
        /// duplicates for this analysis
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetFileData_Project_Analyses_Duplicates> Duplicates { get; }

        public virtual global::System.Boolean Equals(GetFileData_Project_Analyses_Analysis? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Violations, other.Violations) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(LongFunctions, other.LongFunctions) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ComplexFunctions, other.ComplexFunctions) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Duplicates, other.Duplicates);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFileData_Project_Analyses_Analysis)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                foreach (var Violations_elm in Violations)
                {
                    hash ^= 397 * Violations_elm.GetHashCode();
                }

                foreach (var LongFunctions_elm in LongFunctions)
                {
                    hash ^= 397 * LongFunctions_elm.GetHashCode();
                }

                foreach (var ComplexFunctions_elm in ComplexFunctions)
                {
                    hash ^= 397 * ComplexFunctions_elm.GetHashCode();
                }

                foreach (var Duplicates_elm in Duplicates)
                {
                    hash ^= 397 * Duplicates_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Map a violation reported by code inspector
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetFileData_Project_Analyses_Violations_Violation : global::System.IEquatable<GetFileData_Project_Analyses_Violations_Violation>, IGetFileData_Project_Analyses_Violations_Violation
    {
        public GetFileData_Project_Analyses_Violations_Violation(global::System.Int64 line, global::GraphQLClient.ViolationCategory category, global::System.Int64 severity, global::System.String description, global::System.String filename, global::System.Int64 lineCount, global::GraphQLClient.LanguageEnumeration? language, global::System.String? tool, global::System.String? rule, global::System.String? ruleUrl)
        {
            Line = line;
            Category = category;
            Severity = severity;
            Description = description;
            Filename = filename;
            LineCount = lineCount;
            Language = language;
            Tool = tool;
            Rule = rule;
            RuleUrl = ruleUrl;
        }

        /// <summary>
        /// line where the violation occured
        /// </summary>
        public global::System.Int64 Line { get; }

        /// <summary>
        /// category of the violation
        /// </summary>
        public global::GraphQLClient.ViolationCategory Category { get; }

        /// <summary>
        /// severity of the violation
        /// </summary>
        public global::System.Int64 Severity { get; }

        /// <summary>
        /// description of the violation
        /// </summary>
        public global::System.String Description { get; }

        /// <summary>
        /// name of the project
        /// </summary>
        public global::System.String Filename { get; }

        /// <summary>
        /// number of lines (unsupported now)
        /// </summary>
        public global::System.Int64 LineCount { get; }

        /// <summary>
        /// language related to this violation
        /// </summary>
        public global::GraphQLClient.LanguageEnumeration? Language { get; }

        /// <summary>
        /// language related to this violation
        /// </summary>
        public global::System.String? Tool { get; }

        /// <summary>
        /// language related to this violation
        /// </summary>
        public global::System.String? Rule { get; }

        /// <summary>
        /// URL helper to fix the violation
        /// </summary>
        public global::System.String? RuleUrl { get; }

        public virtual global::System.Boolean Equals(GetFileData_Project_Analyses_Violations_Violation? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Line == other.Line) && Category.Equals(other.Category) && Severity == other.Severity && Description.Equals(other.Description) && Filename.Equals(other.Filename) && LineCount == other.LineCount && ((Language is null && other.Language is null) || Language != null && Language.Equals(other.Language)) && ((Tool is null && other.Tool is null) || Tool != null && Tool.Equals(other.Tool)) && ((Rule is null && other.Rule is null) || Rule != null && Rule.Equals(other.Rule)) && ((RuleUrl is null && other.RuleUrl is null) || RuleUrl != null && RuleUrl.Equals(other.RuleUrl));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFileData_Project_Analyses_Violations_Violation)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Line.GetHashCode();
                hash ^= 397 * Category.GetHashCode();
                hash ^= 397 * Severity.GetHashCode();
                hash ^= 397 * Description.GetHashCode();
                hash ^= 397 * Filename.GetHashCode();
                hash ^= 397 * LineCount.GetHashCode();
                if (Language != null)
                {
                    hash ^= 397 * Language.GetHashCode();
                }

                if (Tool != null)
                {
                    hash ^= 397 * Tool.GetHashCode();
                }

                if (Rule != null)
                {
                    hash ^= 397 * Rule.GetHashCode();
                }

                if (RuleUrl != null)
                {
                    hash ^= 397 * RuleUrl.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Function that is complex, either with the cyclomatic or maintanability complexity
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetFileData_Project_Analyses_LongFunctions_ComplexFunction : global::System.IEquatable<GetFileData_Project_Analyses_LongFunctions_ComplexFunction>, IGetFileData_Project_Analyses_LongFunctions_ComplexFunction
    {
        public GetFileData_Project_Analyses_LongFunctions_ComplexFunction(global::System.String filename, global::System.String functionName, global::System.Int64 complexity, global::System.Int64 length, global::System.Int64 lineStart, global::System.Int64 lineEnd)
        {
            Filename = filename;
            FunctionName = functionName;
            Complexity = complexity;
            Length = length;
            LineStart = lineStart;
            LineEnd = lineEnd;
        }

        /// <summary>
        /// filename
        /// </summary>
        public global::System.String Filename { get; }

        /// <summary>
        /// filename
        /// </summary>
        public global::System.String FunctionName { get; }

        /// <summary>
        /// cyclomatic complexity
        /// </summary>
        public global::System.Int64 Complexity { get; }

        /// <summary>
        /// filename
        /// </summary>
        public global::System.Int64 Length { get; }

        /// <summary>
        /// filename
        /// </summary>
        public global::System.Int64 LineStart { get; }

        /// <summary>
        /// filename
        /// </summary>
        public global::System.Int64 LineEnd { get; }

        public virtual global::System.Boolean Equals(GetFileData_Project_Analyses_LongFunctions_ComplexFunction? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Filename.Equals(other.Filename)) && FunctionName.Equals(other.FunctionName) && Complexity == other.Complexity && Length == other.Length && LineStart == other.LineStart && LineEnd == other.LineEnd;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFileData_Project_Analyses_LongFunctions_ComplexFunction)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Filename.GetHashCode();
                hash ^= 397 * FunctionName.GetHashCode();
                hash ^= 397 * Complexity.GetHashCode();
                hash ^= 397 * Length.GetHashCode();
                hash ^= 397 * LineStart.GetHashCode();
                hash ^= 397 * LineEnd.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Function that is complex, either with the cyclomatic or maintanability complexity
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetFileData_Project_Analyses_ComplexFunctions_ComplexFunction : global::System.IEquatable<GetFileData_Project_Analyses_ComplexFunctions_ComplexFunction>, IGetFileData_Project_Analyses_ComplexFunctions_ComplexFunction
    {
        public GetFileData_Project_Analyses_ComplexFunctions_ComplexFunction(global::System.String filename, global::System.String functionName, global::System.Int64 complexity, global::System.Int64 length, global::System.Int64 lineStart, global::System.Int64 lineEnd)
        {
            Filename = filename;
            FunctionName = functionName;
            Complexity = complexity;
            Length = length;
            LineStart = lineStart;
            LineEnd = lineEnd;
        }

        /// <summary>
        /// filename
        /// </summary>
        public global::System.String Filename { get; }

        /// <summary>
        /// filename
        /// </summary>
        public global::System.String FunctionName { get; }

        /// <summary>
        /// cyclomatic complexity
        /// </summary>
        public global::System.Int64 Complexity { get; }

        /// <summary>
        /// filename
        /// </summary>
        public global::System.Int64 Length { get; }

        /// <summary>
        /// filename
        /// </summary>
        public global::System.Int64 LineStart { get; }

        /// <summary>
        /// filename
        /// </summary>
        public global::System.Int64 LineEnd { get; }

        public virtual global::System.Boolean Equals(GetFileData_Project_Analyses_ComplexFunctions_ComplexFunction? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Filename.Equals(other.Filename)) && FunctionName.Equals(other.FunctionName) && Complexity == other.Complexity && Length == other.Length && LineStart == other.LineStart && LineEnd == other.LineEnd;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFileData_Project_Analyses_ComplexFunctions_ComplexFunction)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Filename.GetHashCode();
                hash ^= 397 * FunctionName.GetHashCode();
                hash ^= 397 * Complexity.GetHashCode();
                hash ^= 397 * Length.GetHashCode();
                hash ^= 397 * LineStart.GetHashCode();
                hash ^= 397 * LineEnd.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Information about duplicate (does not contain occurrences)
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetFileData_Project_Analyses_Duplicates_Duplicate : global::System.IEquatable<GetFileData_Project_Analyses_Duplicates_Duplicate>, IGetFileData_Project_Analyses_Duplicates_Duplicate
    {
        public GetFileData_Project_Analyses_Duplicates_Duplicate(global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetFileData_Project_Analyses_Duplicates_Occurrences> occurrences)
        {
            Occurrences = occurrences;
        }

        /// <summary>
        /// list of occurrences
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetFileData_Project_Analyses_Duplicates_Occurrences> Occurrences { get; }

        public virtual global::System.Boolean Equals(GetFileData_Project_Analyses_Duplicates_Duplicate? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Occurrences, other.Occurrences));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFileData_Project_Analyses_Duplicates_Duplicate)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Occurrences_elm in Occurrences)
                {
                    hash ^= 397 * Occurrences_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Information about duplicate occurrence (where it is in your code)
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetFileData_Project_Analyses_Duplicates_Occurrences_DuplicateOccurrence : global::System.IEquatable<GetFileData_Project_Analyses_Duplicates_Occurrences_DuplicateOccurrence>, IGetFileData_Project_Analyses_Duplicates_Occurrences_DuplicateOccurrence
    {
        public GetFileData_Project_Analyses_Duplicates_Occurrences_DuplicateOccurrence(global::System.Int64 line, global::System.String filename)
        {
            Line = line;
            Filename = filename;
        }

        /// <summary>
        /// number of duplicated lines
        /// </summary>
        public global::System.Int64 Line { get; }

        /// <summary>
        /// where the duplicate is (what file)
        /// </summary>
        public global::System.String Filename { get; }

        public virtual global::System.Boolean Equals(GetFileData_Project_Analyses_Duplicates_Occurrences_DuplicateOccurrence? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Line == other.Line) && Filename.Equals(other.Filename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFileData_Project_Analyses_Duplicates_Occurrences_DuplicateOccurrence)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Line.GetHashCode();
                hash ^= 397 * Filename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetFileDataResult
    {
        public global::GraphQLClient.IGetFileData_Project? Project { get; }
    }

    /// <summary>
    /// A project
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetFileData_Project
    {
        /// <summary>
        /// identifier of the project
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// name of the project
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// list of all analyses
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetFileData_Project_Analyses> Analyses { get; }
    }

    /// <summary>
    /// A project
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetFileData_Project_Project : IGetFileData_Project
    {
    }

    /// <summary>
    /// An analysis object
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetFileData_Project_Analyses
    {
        /// <summary>
        /// identifier of the analysis
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// violations for this analysis
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetFileData_Project_Analyses_Violations> Violations { get; }

        /// <summary>
        /// complex functions
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetFileData_Project_Analyses_LongFunctions> LongFunctions { get; }

        /// <summary>
        /// complex functions
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetFileData_Project_Analyses_ComplexFunctions> ComplexFunctions { get; }

        /// <summary>
        /// duplicates for this analysis
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetFileData_Project_Analyses_Duplicates> Duplicates { get; }
    }

    /// <summary>
    /// An analysis object
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetFileData_Project_Analyses_Analysis : IGetFileData_Project_Analyses
    {
    }

    /// <summary>
    /// Map a violation reported by code inspector
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetFileData_Project_Analyses_Violations
    {
        /// <summary>
        /// line where the violation occured
        /// </summary>
        public global::System.Int64 Line { get; }

        /// <summary>
        /// category of the violation
        /// </summary>
        public global::GraphQLClient.ViolationCategory Category { get; }

        /// <summary>
        /// severity of the violation
        /// </summary>
        public global::System.Int64 Severity { get; }

        /// <summary>
        /// description of the violation
        /// </summary>
        public global::System.String Description { get; }

        /// <summary>
        /// name of the project
        /// </summary>
        public global::System.String Filename { get; }

        /// <summary>
        /// number of lines (unsupported now)
        /// </summary>
        public global::System.Int64 LineCount { get; }

        /// <summary>
        /// language related to this violation
        /// </summary>
        public global::GraphQLClient.LanguageEnumeration? Language { get; }

        /// <summary>
        /// language related to this violation
        /// </summary>
        public global::System.String? Tool { get; }

        /// <summary>
        /// language related to this violation
        /// </summary>
        public global::System.String? Rule { get; }

        /// <summary>
        /// URL helper to fix the violation
        /// </summary>
        public global::System.String? RuleUrl { get; }
    }

    /// <summary>
    /// Map a violation reported by code inspector
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetFileData_Project_Analyses_Violations_Violation : IGetFileData_Project_Analyses_Violations
    {
    }

    /// <summary>
    /// Function that is complex, either with the cyclomatic or maintanability complexity
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetFileData_Project_Analyses_LongFunctions
    {
        /// <summary>
        /// filename
        /// </summary>
        public global::System.String Filename { get; }

        /// <summary>
        /// filename
        /// </summary>
        public global::System.String FunctionName { get; }

        /// <summary>
        /// cyclomatic complexity
        /// </summary>
        public global::System.Int64 Complexity { get; }

        /// <summary>
        /// filename
        /// </summary>
        public global::System.Int64 Length { get; }

        /// <summary>
        /// filename
        /// </summary>
        public global::System.Int64 LineStart { get; }

        /// <summary>
        /// filename
        /// </summary>
        public global::System.Int64 LineEnd { get; }
    }

    /// <summary>
    /// Function that is complex, either with the cyclomatic or maintanability complexity
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetFileData_Project_Analyses_LongFunctions_ComplexFunction : IGetFileData_Project_Analyses_LongFunctions
    {
    }

    /// <summary>
    /// Function that is complex, either with the cyclomatic or maintanability complexity
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetFileData_Project_Analyses_ComplexFunctions
    {
        /// <summary>
        /// filename
        /// </summary>
        public global::System.String Filename { get; }

        /// <summary>
        /// filename
        /// </summary>
        public global::System.String FunctionName { get; }

        /// <summary>
        /// cyclomatic complexity
        /// </summary>
        public global::System.Int64 Complexity { get; }

        /// <summary>
        /// filename
        /// </summary>
        public global::System.Int64 Length { get; }

        /// <summary>
        /// filename
        /// </summary>
        public global::System.Int64 LineStart { get; }

        /// <summary>
        /// filename
        /// </summary>
        public global::System.Int64 LineEnd { get; }
    }

    /// <summary>
    /// Function that is complex, either with the cyclomatic or maintanability complexity
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetFileData_Project_Analyses_ComplexFunctions_ComplexFunction : IGetFileData_Project_Analyses_ComplexFunctions
    {
    }

    /// <summary>
    /// Information about duplicate (does not contain occurrences)
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetFileData_Project_Analyses_Duplicates
    {
        /// <summary>
        /// list of occurrences
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetFileData_Project_Analyses_Duplicates_Occurrences> Occurrences { get; }
    }

    /// <summary>
    /// Information about duplicate (does not contain occurrences)
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetFileData_Project_Analyses_Duplicates_Duplicate : IGetFileData_Project_Analyses_Duplicates
    {
    }

    /// <summary>
    /// Information about duplicate occurrence (where it is in your code)
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetFileData_Project_Analyses_Duplicates_Occurrences
    {
        /// <summary>
        /// number of duplicated lines
        /// </summary>
        public global::System.Int64 Line { get; }

        /// <summary>
        /// where the duplicate is (what file)
        /// </summary>
        public global::System.String Filename { get; }
    }

    /// <summary>
    /// Information about duplicate occurrence (where it is in your code)
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetFileData_Project_Analyses_Duplicates_Occurrences_DuplicateOccurrence : IGetFileData_Project_Analyses_Duplicates_Occurrences
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetProjectsResult : global::System.IEquatable<GetProjectsResult>, IGetProjectsResult
    {
        public GetProjectsResult(global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetProjects_Projects> projects)
        {
            Projects = projects;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetProjects_Projects> Projects { get; }

        public virtual global::System.Boolean Equals(GetProjectsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Projects, other.Projects));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProjectsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Projects_elm in Projects)
                {
                    hash ^= 397 * Projects_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A project
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetProjects_Projects_Project : global::System.IEquatable<GetProjects_Projects_Project>, IGetProjects_Projects_Project
    {
        public GetProjects_Projects_Project(global::System.Int64 id, global::System.String name, global::GraphQLClient.IGetProjects_Projects_Owner? owner, global::GraphQLClient.IGetProjects_Projects_Group? @group, global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetProjects_Projects_ViolationsToIgnore> violationsToIgnore)
        {
            Id = id;
            Name = name;
            Owner = owner;
            Group = @group;
            ViolationsToIgnore = violationsToIgnore;
        }

        /// <summary>
        /// identifier of the project
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// name of the project
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// owner of the project
        /// </summary>
        public global::GraphQLClient.IGetProjects_Projects_Owner? Owner { get; }

        /// <summary>
        /// Group of the project (if project is associated with a group)
        /// </summary>
        public global::GraphQLClient.IGetProjects_Projects_Group? Group { get; }

        /// <summary>
        /// List of violations to ignore
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetProjects_Projects_ViolationsToIgnore> ViolationsToIgnore { get; }

        public virtual global::System.Boolean Equals(GetProjects_Projects_Project? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Name.Equals(other.Name) && ((Owner is null && other.Owner is null) || Owner != null && Owner.Equals(other.Owner)) && ((Group is null && other.Group is null) || Group != null && Group.Equals(other.Group)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ViolationsToIgnore, other.ViolationsToIgnore);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProjects_Projects_Project)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (Owner != null)
                {
                    hash ^= 397 * Owner.GetHashCode();
                }

                if (Group != null)
                {
                    hash ^= 397 * Group.GetHashCode();
                }

                foreach (var ViolationsToIgnore_elm in ViolationsToIgnore)
                {
                    hash ^= 397 * ViolationsToIgnore_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A user
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetProjects_Projects_Owner_User : global::System.IEquatable<GetProjects_Projects_Owner_User>, IGetProjects_Projects_Owner_User
    {
        public GetProjects_Projects_Owner_User(global::System.String username)
        {
            Username = username;
        }

        /// <summary>
        /// name of the user
        /// </summary>
        public global::System.String Username { get; }

        public virtual global::System.Boolean Equals(GetProjects_Projects_Owner_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Username.Equals(other.Username));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProjects_Projects_Owner_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Username.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// A group
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetProjects_Projects_Group_Group : global::System.IEquatable<GetProjects_Projects_Group_Group>, IGetProjects_Projects_Group_Group
    {
        public GetProjects_Projects_Group_Group(global::System.Int64 id, global::System.String name)
        {
            Id = id;
            Name = name;
        }

        /// <summary>
        /// identifier of the project
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// name of the group
        /// </summary>
        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(GetProjects_Projects_Group_Group? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProjects_Projects_Group_Group)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Violation to ignore for a particular project
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetProjects_Projects_ViolationsToIgnore_ViolationIgnore : global::System.IEquatable<GetProjects_Projects_ViolationsToIgnore_ViolationIgnore>, IGetProjects_Projects_ViolationsToIgnore_ViolationIgnore
    {
        public GetProjects_Projects_ViolationsToIgnore_ViolationIgnore(global::System.String? filename, global::System.String? description, global::System.String? prefix, global::System.String rule, global::System.String tool, global::GraphQLClient.LanguageEnumeration? language)
        {
            Filename = filename;
            Description = description;
            Prefix = prefix;
            Rule = rule;
            Tool = tool;
            Language = language;
        }

        /// <summary>
        /// filename of the violation to ignore
        /// </summary>
        public global::System.String? Filename { get; }

        /// <summary>
        /// description of the violation
        /// </summary>
        public global::System.String? Description { get; }

        /// <summary>
        /// prefix to ignore
        /// </summary>
        public global::System.String? Prefix { get; }

        /// <summary>
        /// when the repository was created
        /// </summary>
        public global::System.String Rule { get; }

        /// <summary>
        /// tool that detects this violation
        /// </summary>
        public global::System.String Tool { get; }

        /// <summary>
        /// language of the violation
        /// </summary>
        public global::GraphQLClient.LanguageEnumeration? Language { get; }

        public virtual global::System.Boolean Equals(GetProjects_Projects_ViolationsToIgnore_ViolationIgnore? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Filename is null && other.Filename is null) || Filename != null && Filename.Equals(other.Filename))) && ((Description is null && other.Description is null) || Description != null && Description.Equals(other.Description)) && ((Prefix is null && other.Prefix is null) || Prefix != null && Prefix.Equals(other.Prefix)) && Rule.Equals(other.Rule) && Tool.Equals(other.Tool) && ((Language is null && other.Language is null) || Language != null && Language.Equals(other.Language));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProjects_Projects_ViolationsToIgnore_ViolationIgnore)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Filename != null)
                {
                    hash ^= 397 * Filename.GetHashCode();
                }

                if (Description != null)
                {
                    hash ^= 397 * Description.GetHashCode();
                }

                if (Prefix != null)
                {
                    hash ^= 397 * Prefix.GetHashCode();
                }

                hash ^= 397 * Rule.GetHashCode();
                hash ^= 397 * Tool.GetHashCode();
                if (Language != null)
                {
                    hash ^= 397 * Language.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetProjectsResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetProjects_Projects> Projects { get; }
    }

    /// <summary>
    /// A project
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetProjects_Projects
    {
        /// <summary>
        /// identifier of the project
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// name of the project
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// owner of the project
        /// </summary>
        public global::GraphQLClient.IGetProjects_Projects_Owner? Owner { get; }

        /// <summary>
        /// Group of the project (if project is associated with a group)
        /// </summary>
        public global::GraphQLClient.IGetProjects_Projects_Group? Group { get; }

        /// <summary>
        /// List of violations to ignore
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetProjects_Projects_ViolationsToIgnore> ViolationsToIgnore { get; }
    }

    /// <summary>
    /// A project
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetProjects_Projects_Project : IGetProjects_Projects
    {
    }

    /// <summary>
    /// A user
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetProjects_Projects_Owner
    {
        /// <summary>
        /// name of the user
        /// </summary>
        public global::System.String Username { get; }
    }

    /// <summary>
    /// A user
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetProjects_Projects_Owner_User : IGetProjects_Projects_Owner
    {
    }

    /// <summary>
    /// A group
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetProjects_Projects_Group
    {
        /// <summary>
        /// identifier of the project
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// name of the group
        /// </summary>
        public global::System.String Name { get; }
    }

    /// <summary>
    /// A group
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetProjects_Projects_Group_Group : IGetProjects_Projects_Group
    {
    }

    /// <summary>
    /// Violation to ignore for a particular project
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetProjects_Projects_ViolationsToIgnore
    {
        /// <summary>
        /// filename of the violation to ignore
        /// </summary>
        public global::System.String? Filename { get; }

        /// <summary>
        /// description of the violation
        /// </summary>
        public global::System.String? Description { get; }

        /// <summary>
        /// prefix to ignore
        /// </summary>
        public global::System.String? Prefix { get; }

        /// <summary>
        /// when the repository was created
        /// </summary>
        public global::System.String Rule { get; }

        /// <summary>
        /// tool that detects this violation
        /// </summary>
        public global::System.String Tool { get; }

        /// <summary>
        /// language of the violation
        /// </summary>
        public global::GraphQLClient.LanguageEnumeration? Language { get; }
    }

    /// <summary>
    /// Violation to ignore for a particular project
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetProjects_Projects_ViolationsToIgnore_ViolationIgnore : IGetProjects_Projects_ViolationsToIgnore
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientResult : global::System.IEquatable<GetRecipesForClientResult>, IGetRecipesForClientResult
    {
        public GetRecipesForClientResult(global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetRecipesForClient_GetRecipesForClient> getRecipesForClient)
        {
            GetRecipesForClient = getRecipesForClient;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetRecipesForClient_GetRecipesForClient> GetRecipesForClient { get; }

        public virtual global::System.Boolean Equals(GetRecipesForClientResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(GetRecipesForClient, other.GetRecipesForClient));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRecipesForClientResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var GetRecipesForClient_elm in GetRecipesForClient)
                {
                    hash ^= 397 * GetRecipesForClient_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Recipe to get code
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClient_GetRecipesForClient_AssistantRecipe : global::System.IEquatable<GetRecipesForClient_GetRecipesForClient_AssistantRecipe>, IGetRecipesForClient_GetRecipesForClient_AssistantRecipe
    {
        public GetRecipesForClient_GetRecipesForClient_AssistantRecipe(global::System.Int64 id, global::System.String name, global::System.String code, global::System.String jetbrainsFormat, global::System.Collections.Generic.IReadOnlyList<global::System.String> keywords, global::System.Collections.Generic.IReadOnlyList<global::System.String> imports, global::GraphQLClient.LanguageEnumeration language, global::System.String description, global::System.String? shortcut)
        {
            Id = id;
            Name = name;
            Code = code;
            JetbrainsFormat = jetbrainsFormat;
            Keywords = keywords;
            Imports = imports;
            Language = language;
            Description = description;
            Shortcut = shortcut;
        }

        /// <summary>
        /// identifier
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// name
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// content
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// jetbrains format
        /// </summary>
        public global::System.String JetbrainsFormat { get; }

        /// <summary>
        /// keywords
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String> Keywords { get; }

        /// <summary>
        /// imports to add when adding the recipe
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String> Imports { get; }

        /// <summary>
        /// language of the recipe
        /// </summary>
        public global::GraphQLClient.LanguageEnumeration Language { get; }

        /// <summary>
        /// description
        /// </summary>
        public global::System.String Description { get; }

        /// <summary>
        /// shortcut
        /// </summary>
        public global::System.String? Shortcut { get; }

        public virtual global::System.Boolean Equals(GetRecipesForClient_GetRecipesForClient_AssistantRecipe? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Name.Equals(other.Name) && Code.Equals(other.Code) && JetbrainsFormat.Equals(other.JetbrainsFormat) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Keywords, other.Keywords) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Imports, other.Imports) && Language.Equals(other.Language) && Description.Equals(other.Description) && ((Shortcut is null && other.Shortcut is null) || Shortcut != null && Shortcut.Equals(other.Shortcut));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRecipesForClient_GetRecipesForClient_AssistantRecipe)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * JetbrainsFormat.GetHashCode();
                foreach (var Keywords_elm in Keywords)
                {
                    hash ^= 397 * Keywords_elm.GetHashCode();
                }

                foreach (var Imports_elm in Imports)
                {
                    hash ^= 397 * Imports_elm.GetHashCode();
                }

                hash ^= 397 * Language.GetHashCode();
                hash ^= 397 * Description.GetHashCode();
                if (Shortcut != null)
                {
                    hash ^= 397 * Shortcut.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetRecipesForClientResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetRecipesForClient_GetRecipesForClient> GetRecipesForClient { get; }
    }

    /// <summary>
    /// Recipe to get code
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetRecipesForClient_GetRecipesForClient
    {
        /// <summary>
        /// identifier
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// name
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// content
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// jetbrains format
        /// </summary>
        public global::System.String JetbrainsFormat { get; }

        /// <summary>
        /// keywords
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String> Keywords { get; }

        /// <summary>
        /// imports to add when adding the recipe
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String> Imports { get; }

        /// <summary>
        /// language of the recipe
        /// </summary>
        public global::GraphQLClient.LanguageEnumeration Language { get; }

        /// <summary>
        /// description
        /// </summary>
        public global::System.String Description { get; }

        /// <summary>
        /// shortcut
        /// </summary>
        public global::System.String? Shortcut { get; }
    }

    /// <summary>
    /// Recipe to get code
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetRecipesForClient_GetRecipesForClient_AssistantRecipe : IGetRecipesForClient_GetRecipesForClient
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientByShortcutResult : global::System.IEquatable<GetRecipesForClientByShortcutResult>, IGetRecipesForClientByShortcutResult
    {
        public GetRecipesForClientByShortcutResult(global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetRecipesForClientByShortcut_GetRecipesForClientByShortcut> getRecipesForClientByShortcut)
        {
            GetRecipesForClientByShortcut = getRecipesForClientByShortcut;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetRecipesForClientByShortcut_GetRecipesForClientByShortcut> GetRecipesForClientByShortcut { get; }

        public virtual global::System.Boolean Equals(GetRecipesForClientByShortcutResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(GetRecipesForClientByShortcut, other.GetRecipesForClientByShortcut));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRecipesForClientByShortcutResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var GetRecipesForClientByShortcut_elm in GetRecipesForClientByShortcut)
                {
                    hash ^= 397 * GetRecipesForClientByShortcut_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Recipe to get code
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientByShortcut_GetRecipesForClientByShortcut_AssistantRecipe : global::System.IEquatable<GetRecipesForClientByShortcut_GetRecipesForClientByShortcut_AssistantRecipe>, IGetRecipesForClientByShortcut_GetRecipesForClientByShortcut_AssistantRecipe
    {
        public GetRecipesForClientByShortcut_GetRecipesForClientByShortcut_AssistantRecipe(global::System.Int64 id, global::System.String name, global::System.String code, global::System.Collections.Generic.IReadOnlyList<global::System.String> keywords, global::System.Collections.Generic.IReadOnlyList<global::System.String> imports, global::GraphQLClient.LanguageEnumeration language, global::System.String description, global::System.String? shortcut)
        {
            Id = id;
            Name = name;
            Code = code;
            Keywords = keywords;
            Imports = imports;
            Language = language;
            Description = description;
            Shortcut = shortcut;
        }

        /// <summary>
        /// identifier
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// name
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// content
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// keywords
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String> Keywords { get; }

        /// <summary>
        /// imports to add when adding the recipe
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String> Imports { get; }

        /// <summary>
        /// language of the recipe
        /// </summary>
        public global::GraphQLClient.LanguageEnumeration Language { get; }

        /// <summary>
        /// description
        /// </summary>
        public global::System.String Description { get; }

        /// <summary>
        /// shortcut
        /// </summary>
        public global::System.String? Shortcut { get; }

        public virtual global::System.Boolean Equals(GetRecipesForClientByShortcut_GetRecipesForClientByShortcut_AssistantRecipe? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Name.Equals(other.Name) && Code.Equals(other.Code) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Keywords, other.Keywords) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Imports, other.Imports) && Language.Equals(other.Language) && Description.Equals(other.Description) && ((Shortcut is null && other.Shortcut is null) || Shortcut != null && Shortcut.Equals(other.Shortcut));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRecipesForClientByShortcut_GetRecipesForClientByShortcut_AssistantRecipe)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Code.GetHashCode();
                foreach (var Keywords_elm in Keywords)
                {
                    hash ^= 397 * Keywords_elm.GetHashCode();
                }

                foreach (var Imports_elm in Imports)
                {
                    hash ^= 397 * Imports_elm.GetHashCode();
                }

                hash ^= 397 * Language.GetHashCode();
                hash ^= 397 * Description.GetHashCode();
                if (Shortcut != null)
                {
                    hash ^= 397 * Shortcut.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetRecipesForClientByShortcutResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetRecipesForClientByShortcut_GetRecipesForClientByShortcut> GetRecipesForClientByShortcut { get; }
    }

    /// <summary>
    /// Recipe to get code
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetRecipesForClientByShortcut_GetRecipesForClientByShortcut
    {
        /// <summary>
        /// identifier
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// name
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// content
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// keywords
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String> Keywords { get; }

        /// <summary>
        /// imports to add when adding the recipe
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String> Imports { get; }

        /// <summary>
        /// language of the recipe
        /// </summary>
        public global::GraphQLClient.LanguageEnumeration Language { get; }

        /// <summary>
        /// description
        /// </summary>
        public global::System.String Description { get; }

        /// <summary>
        /// shortcut
        /// </summary>
        public global::System.String? Shortcut { get; }
    }

    /// <summary>
    /// Recipe to get code
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetRecipesForClientByShortcut_GetRecipesForClientByShortcut_AssistantRecipe : IGetRecipesForClientByShortcut_GetRecipesForClientByShortcut
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientByShortcutLastTimestampResult : global::System.IEquatable<GetRecipesForClientByShortcutLastTimestampResult>, IGetRecipesForClientByShortcutLastTimestampResult
    {
        public GetRecipesForClientByShortcutLastTimestampResult(global::System.Int64? getRecipesForClientByShortcutLastTimestamp)
        {
            GetRecipesForClientByShortcutLastTimestamp = getRecipesForClientByShortcutLastTimestamp;
        }

        public global::System.Int64? GetRecipesForClientByShortcutLastTimestamp { get; }

        public virtual global::System.Boolean Equals(GetRecipesForClientByShortcutLastTimestampResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GetRecipesForClientByShortcutLastTimestamp == other.GetRecipesForClientByShortcutLastTimestamp);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRecipesForClientByShortcutLastTimestampResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (GetRecipesForClientByShortcutLastTimestamp != null)
                {
                    hash ^= 397 * GetRecipesForClientByShortcutLastTimestamp.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetRecipesForClientByShortcutLastTimestampResult
    {
        public global::System.Int64? GetRecipesForClientByShortcutLastTimestamp { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientSemanticResult : global::System.IEquatable<GetRecipesForClientSemanticResult>, IGetRecipesForClientSemanticResult
    {
        public GetRecipesForClientSemanticResult(global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetRecipesForClientSemantic_AssistantRecipesSemanticSearch> assistantRecipesSemanticSearch)
        {
            AssistantRecipesSemanticSearch = assistantRecipesSemanticSearch;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetRecipesForClientSemantic_AssistantRecipesSemanticSearch> AssistantRecipesSemanticSearch { get; }

        public virtual global::System.Boolean Equals(GetRecipesForClientSemanticResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(AssistantRecipesSemanticSearch, other.AssistantRecipesSemanticSearch));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRecipesForClientSemanticResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var AssistantRecipesSemanticSearch_elm in AssistantRecipesSemanticSearch)
                {
                    hash ^= 397 * AssistantRecipesSemanticSearch_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Recipe to get code
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_AssistantRecipe : global::System.IEquatable<GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_AssistantRecipe>, IGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_AssistantRecipe
    {
        public GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_AssistantRecipe(global::System.Int64 id, global::System.String name, global::System.String code, global::System.String jetbrainsFormat, global::System.String presentableFormat, global::System.Collections.Generic.IReadOnlyList<global::System.String> keywords, global::System.Collections.Generic.IReadOnlyList<global::System.String> imports, global::GraphQLClient.LanguageEnumeration language, global::System.Boolean isPublic, global::System.String description, global::System.String? shortcut, global::GraphQLClient.IGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Owner? owner, global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups> groups)
        {
            Id = id;
            Name = name;
            Code = code;
            JetbrainsFormat = jetbrainsFormat;
            PresentableFormat = presentableFormat;
            Keywords = keywords;
            Imports = imports;
            Language = language;
            IsPublic = isPublic;
            Description = description;
            Shortcut = shortcut;
            Owner = owner;
            Groups = groups;
        }

        /// <summary>
        /// identifier
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// name
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// content
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// jetbrains format
        /// </summary>
        public global::System.String JetbrainsFormat { get; }

        /// <summary>
        /// presentable format without user variable
        /// </summary>
        public global::System.String PresentableFormat { get; }

        /// <summary>
        /// keywords
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String> Keywords { get; }

        /// <summary>
        /// imports to add when adding the recipe
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String> Imports { get; }

        /// <summary>
        /// language of the recipe
        /// </summary>
        public global::GraphQLClient.LanguageEnumeration Language { get; }

        /// <summary>
        /// is public
        /// </summary>
        public global::System.Boolean IsPublic { get; }

        /// <summary>
        /// description
        /// </summary>
        public global::System.String Description { get; }

        /// <summary>
        /// shortcut
        /// </summary>
        public global::System.String? Shortcut { get; }

        /// <summary>
        /// recipe owner
        /// </summary>
        public global::GraphQLClient.IGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Owner? Owner { get; }

        /// <summary>
        /// groups the recipe is shared with
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups> Groups { get; }

        public virtual global::System.Boolean Equals(GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_AssistantRecipe? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Name.Equals(other.Name) && Code.Equals(other.Code) && JetbrainsFormat.Equals(other.JetbrainsFormat) && PresentableFormat.Equals(other.PresentableFormat) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Keywords, other.Keywords) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Imports, other.Imports) && Language.Equals(other.Language) && IsPublic == other.IsPublic && Description.Equals(other.Description) && ((Shortcut is null && other.Shortcut is null) || Shortcut != null && Shortcut.Equals(other.Shortcut)) && ((Owner is null && other.Owner is null) || Owner != null && Owner.Equals(other.Owner)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Groups, other.Groups);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_AssistantRecipe)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * JetbrainsFormat.GetHashCode();
                hash ^= 397 * PresentableFormat.GetHashCode();
                foreach (var Keywords_elm in Keywords)
                {
                    hash ^= 397 * Keywords_elm.GetHashCode();
                }

                foreach (var Imports_elm in Imports)
                {
                    hash ^= 397 * Imports_elm.GetHashCode();
                }

                hash ^= 397 * Language.GetHashCode();
                hash ^= 397 * IsPublic.GetHashCode();
                hash ^= 397 * Description.GetHashCode();
                if (Shortcut != null)
                {
                    hash ^= 397 * Shortcut.GetHashCode();
                }

                if (Owner != null)
                {
                    hash ^= 397 * Owner.GetHashCode();
                }

                foreach (var Groups_elm in Groups)
                {
                    hash ^= 397 * Groups_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A public user, contains only public information
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Owner_PublicUser : global::System.IEquatable<GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Owner_PublicUser>, IGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Owner_PublicUser
    {
        public GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Owner_PublicUser(global::System.Int64 id, global::System.String? displayName, global::System.String? slug, global::System.Boolean hasSlug, global::GraphQLClient.AccountType accountType)
        {
            Id = id;
            DisplayName = displayName;
            Slug = slug;
            HasSlug = hasSlug;
            AccountType = accountType;
        }

        /// <summary>
        /// id of the user
        /// </summary>
        public global::System.Int64 Id { get; }

        public global::System.String? DisplayName { get; }

        public global::System.String? Slug { get; }

        public global::System.Boolean HasSlug { get; }

        /// <summary>
        /// type of project (from third party or from the website
        /// </summary>
        public global::GraphQLClient.AccountType AccountType { get; }

        public virtual global::System.Boolean Equals(GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Owner_PublicUser? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((DisplayName is null && other.DisplayName is null) || DisplayName != null && DisplayName.Equals(other.DisplayName)) && ((Slug is null && other.Slug is null) || Slug != null && Slug.Equals(other.Slug)) && HasSlug == other.HasSlug && AccountType.Equals(other.AccountType);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Owner_PublicUser)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (DisplayName != null)
                {
                    hash ^= 397 * DisplayName.GetHashCode();
                }

                if (Slug != null)
                {
                    hash ^= 397 * Slug.GetHashCode();
                }

                hash ^= 397 * HasSlug.GetHashCode();
                hash ^= 397 * AccountType.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// A group
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups_Group : global::System.IEquatable<GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups_Group>, IGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups_Group
    {
        public GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups_Group(global::System.Int64 id, global::System.String name)
        {
            Id = id;
            Name = name;
        }

        /// <summary>
        /// identifier of the project
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// name of the group
        /// </summary>
        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups_Group? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups_Group)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetRecipesForClientSemanticResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetRecipesForClientSemantic_AssistantRecipesSemanticSearch> AssistantRecipesSemanticSearch { get; }
    }

    /// <summary>
    /// Recipe to get code
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetRecipesForClientSemantic_AssistantRecipesSemanticSearch
    {
        /// <summary>
        /// identifier
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// name
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// content
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// jetbrains format
        /// </summary>
        public global::System.String JetbrainsFormat { get; }

        /// <summary>
        /// presentable format without user variable
        /// </summary>
        public global::System.String PresentableFormat { get; }

        /// <summary>
        /// keywords
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String> Keywords { get; }

        /// <summary>
        /// imports to add when adding the recipe
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String> Imports { get; }

        /// <summary>
        /// language of the recipe
        /// </summary>
        public global::GraphQLClient.LanguageEnumeration Language { get; }

        /// <summary>
        /// is public
        /// </summary>
        public global::System.Boolean IsPublic { get; }

        /// <summary>
        /// description
        /// </summary>
        public global::System.String Description { get; }

        /// <summary>
        /// shortcut
        /// </summary>
        public global::System.String? Shortcut { get; }

        /// <summary>
        /// recipe owner
        /// </summary>
        public global::GraphQLClient.IGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Owner? Owner { get; }

        /// <summary>
        /// groups the recipe is shared with
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups> Groups { get; }
    }

    /// <summary>
    /// Recipe to get code
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_AssistantRecipe : IGetRecipesForClientSemantic_AssistantRecipesSemanticSearch
    {
    }

    /// <summary>
    /// A public user, contains only public information
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Owner
    {
        /// <summary>
        /// id of the user
        /// </summary>
        public global::System.Int64 Id { get; }

        public global::System.String? DisplayName { get; }

        public global::System.String? Slug { get; }

        public global::System.Boolean HasSlug { get; }

        /// <summary>
        /// type of project (from third party or from the website
        /// </summary>
        public global::GraphQLClient.AccountType AccountType { get; }
    }

    /// <summary>
    /// A public user, contains only public information
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Owner_PublicUser : IGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Owner
    {
    }

    /// <summary>
    /// A group
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups
    {
        /// <summary>
        /// identifier of the project
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// name of the group
        /// </summary>
        public global::System.String Name { get; }
    }

    /// <summary>
    /// A group
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups_Group : IGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetUserResult : global::System.IEquatable<GetUserResult>, IGetUserResult
    {
        public GetUserResult(global::GraphQLClient.IGetUser_User? user)
        {
            User = user;
        }

        public global::GraphQLClient.IGetUser_User? User { get; }

        public virtual global::System.Boolean Equals(GetUserResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((User is null && other.User is null) || User != null && User.Equals(other.User)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUserResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (User != null)
                {
                    hash ^= 397 * User.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A user
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetUser_User_User : global::System.IEquatable<GetUser_User_User>, IGetUser_User_User
    {
        public GetUser_User_User(global::System.String username)
        {
            Username = username;
        }

        /// <summary>
        /// name of the user
        /// </summary>
        public global::System.String Username { get; }

        public virtual global::System.Boolean Equals(GetUser_User_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Username.Equals(other.Username));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUser_User_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Username.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetUserResult
    {
        public global::GraphQLClient.IGetUser_User? User { get; }
    }

    /// <summary>
    /// A user
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetUser_User
    {
        /// <summary>
        /// name of the user
        /// </summary>
        public global::System.String Username { get; }
    }

    /// <summary>
    /// A user
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetUser_User_User : IGetUser_User
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class AddViolationToIgnoreResult : global::System.IEquatable<AddViolationToIgnoreResult>, IAddViolationToIgnoreResult
    {
        public AddViolationToIgnoreResult(global::GraphQLClient.IAddViolationToIgnore_AddViolationToIgnore? addViolationToIgnore)
        {
            AddViolationToIgnore = addViolationToIgnore;
        }

        public global::GraphQLClient.IAddViolationToIgnore_AddViolationToIgnore? AddViolationToIgnore { get; }

        public virtual global::System.Boolean Equals(AddViolationToIgnoreResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AddViolationToIgnore is null && other.AddViolationToIgnore is null) || AddViolationToIgnore != null && AddViolationToIgnore.Equals(other.AddViolationToIgnore)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddViolationToIgnoreResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AddViolationToIgnore != null)
                {
                    hash ^= 397 * AddViolationToIgnore.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Violation to ignore for a particular project
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class AddViolationToIgnore_AddViolationToIgnore_ViolationIgnore : global::System.IEquatable<AddViolationToIgnore_AddViolationToIgnore_ViolationIgnore>, IAddViolationToIgnore_AddViolationToIgnore_ViolationIgnore
    {
        public AddViolationToIgnore_AddViolationToIgnore_ViolationIgnore(global::System.String rule)
        {
            Rule = rule;
        }

        /// <summary>
        /// when the repository was created
        /// </summary>
        public global::System.String Rule { get; }

        public virtual global::System.Boolean Equals(AddViolationToIgnore_AddViolationToIgnore_ViolationIgnore? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Rule.Equals(other.Rule));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddViolationToIgnore_AddViolationToIgnore_ViolationIgnore)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Rule.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IAddViolationToIgnoreResult
    {
        public global::GraphQLClient.IAddViolationToIgnore_AddViolationToIgnore? AddViolationToIgnore { get; }
    }

    /// <summary>
    /// Violation to ignore for a particular project
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IAddViolationToIgnore_AddViolationToIgnore
    {
        /// <summary>
        /// when the repository was created
        /// </summary>
        public global::System.String Rule { get; }
    }

    /// <summary>
    /// Violation to ignore for a particular project
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IAddViolationToIgnore_AddViolationToIgnore_ViolationIgnore : IAddViolationToIgnore_AddViolationToIgnore
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class RecordAccessResult : global::System.IEquatable<RecordAccessResult>, IRecordAccessResult
    {
        public RecordAccessResult(global::System.String recordAccess)
        {
            RecordAccess = recordAccess;
        }

        public global::System.String RecordAccess { get; }

        public virtual global::System.Boolean Equals(RecordAccessResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (RecordAccess.Equals(other.RecordAccess));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((RecordAccessResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * RecordAccess.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IRecordAccessResult
    {
        public global::System.String RecordAccess { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class RecordRecipeUseResult : global::System.IEquatable<RecordRecipeUseResult>, IRecordRecipeUseResult
    {
        public RecordRecipeUseResult(global::System.String recordAccess)
        {
            RecordAccess = recordAccess;
        }

        public global::System.String RecordAccess { get; }

        public virtual global::System.Boolean Equals(RecordRecipeUseResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (RecordAccess.Equals(other.RecordAccess));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((RecordRecipeUseResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * RecordAccess.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IRecordRecipeUseResult
    {
        public global::System.String RecordAccess { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class RemoveViolationToIgnoreResult : global::System.IEquatable<RemoveViolationToIgnoreResult>, IRemoveViolationToIgnoreResult
    {
        public RemoveViolationToIgnoreResult(global::System.String removeViolationToIgnore)
        {
            RemoveViolationToIgnore = removeViolationToIgnore;
        }

        public global::System.String RemoveViolationToIgnore { get; }

        public virtual global::System.Boolean Equals(RemoveViolationToIgnoreResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (RemoveViolationToIgnore.Equals(other.RemoveViolationToIgnore));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((RemoveViolationToIgnoreResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * RemoveViolationToIgnore.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IRemoveViolationToIgnoreResult
    {
        public global::System.String RemoveViolationToIgnore { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public enum ViolationCategory
    {
        Unknown,
        ErrorProne,
        CodeStyle,
        BestPractice,
        Safety,
        Security,
        Design,
        Deployment,
        Performance,
        Documentation
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class ViolationCategorySerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, ViolationCategory>
    {
        public global::System.String TypeName => "ViolationCategory";
        public ViolationCategory Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "Unknown" => ViolationCategory.Unknown,
                "Error_Prone" => ViolationCategory.ErrorProne,
                "Code_Style" => ViolationCategory.CodeStyle,
                "Best_Practice" => ViolationCategory.BestPractice,
                "Safety" => ViolationCategory.Safety,
                "Security" => ViolationCategory.Security,
                "Design" => ViolationCategory.Design,
                "Deployment" => ViolationCategory.Deployment,
                "Performance" => ViolationCategory.Performance,
                "Documentation" => ViolationCategory.Documentation,
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                ViolationCategory.Unknown => "Unknown",
                ViolationCategory.ErrorProne => "Error_Prone",
                ViolationCategory.CodeStyle => "Code_Style",
                ViolationCategory.BestPractice => "Best_Practice",
                ViolationCategory.Safety => "Safety",
                ViolationCategory.Security => "Security",
                ViolationCategory.Design => "Design",
                ViolationCategory.Deployment => "Deployment",
                ViolationCategory.Performance => "Performance",
                ViolationCategory.Documentation => "Documentation",
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public enum LanguageEnumeration
    {
        Unknown,
        Coldfusion,
        Docker,
        Objectivec,
        Terraform,
        Json,
        Yaml,
        Typescript,
        Swift,
        Solidity,
        Sql,
        Shell,
        Scala,
        Rust,
        Ruby,
        Php,
        Python,
        Perl,
        Kotlin,
        Javascript,
        Java,
        Html,
        Haskell,
        Go,
        Dart,
        Csharp,
        Css,
        Cpp,
        C,
        Apex
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class LanguageEnumerationSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, LanguageEnumeration>
    {
        public global::System.String TypeName => "LanguageEnumeration";
        public LanguageEnumeration Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "Unknown" => LanguageEnumeration.Unknown,
                "Coldfusion" => LanguageEnumeration.Coldfusion,
                "Docker" => LanguageEnumeration.Docker,
                "Objectivec" => LanguageEnumeration.Objectivec,
                "Terraform" => LanguageEnumeration.Terraform,
                "Json" => LanguageEnumeration.Json,
                "Yaml" => LanguageEnumeration.Yaml,
                "Typescript" => LanguageEnumeration.Typescript,
                "Swift" => LanguageEnumeration.Swift,
                "Solidity" => LanguageEnumeration.Solidity,
                "Sql" => LanguageEnumeration.Sql,
                "Shell" => LanguageEnumeration.Shell,
                "Scala" => LanguageEnumeration.Scala,
                "Rust" => LanguageEnumeration.Rust,
                "Ruby" => LanguageEnumeration.Ruby,
                "Php" => LanguageEnumeration.Php,
                "Python" => LanguageEnumeration.Python,
                "Perl" => LanguageEnumeration.Perl,
                "Kotlin" => LanguageEnumeration.Kotlin,
                "Javascript" => LanguageEnumeration.Javascript,
                "Java" => LanguageEnumeration.Java,
                "Html" => LanguageEnumeration.Html,
                "Haskell" => LanguageEnumeration.Haskell,
                "Go" => LanguageEnumeration.Go,
                "Dart" => LanguageEnumeration.Dart,
                "Csharp" => LanguageEnumeration.Csharp,
                "Css" => LanguageEnumeration.Css,
                "Cpp" => LanguageEnumeration.Cpp,
                "C" => LanguageEnumeration.C,
                "Apex" => LanguageEnumeration.Apex,
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                LanguageEnumeration.Unknown => "Unknown",
                LanguageEnumeration.Coldfusion => "Coldfusion",
                LanguageEnumeration.Docker => "Docker",
                LanguageEnumeration.Objectivec => "Objectivec",
                LanguageEnumeration.Terraform => "Terraform",
                LanguageEnumeration.Json => "Json",
                LanguageEnumeration.Yaml => "Yaml",
                LanguageEnumeration.Typescript => "Typescript",
                LanguageEnumeration.Swift => "Swift",
                LanguageEnumeration.Solidity => "Solidity",
                LanguageEnumeration.Sql => "Sql",
                LanguageEnumeration.Shell => "Shell",
                LanguageEnumeration.Scala => "Scala",
                LanguageEnumeration.Rust => "Rust",
                LanguageEnumeration.Ruby => "Ruby",
                LanguageEnumeration.Php => "Php",
                LanguageEnumeration.Python => "Python",
                LanguageEnumeration.Perl => "Perl",
                LanguageEnumeration.Kotlin => "Kotlin",
                LanguageEnumeration.Javascript => "Javascript",
                LanguageEnumeration.Java => "Java",
                LanguageEnumeration.Html => "Html",
                LanguageEnumeration.Haskell => "Haskell",
                LanguageEnumeration.Go => "Go",
                LanguageEnumeration.Dart => "Dart",
                LanguageEnumeration.Csharp => "Csharp",
                LanguageEnumeration.Css => "Css",
                LanguageEnumeration.Cpp => "Cpp",
                LanguageEnumeration.C => "C",
                LanguageEnumeration.Apex => "Apex",
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public enum AccountType
    {
        Bitbucket,
        Google,
        Gitlab,
        Github,
        Regular
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class AccountTypeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, AccountType>
    {
        public global::System.String TypeName => "AccountType";
        public AccountType Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "Bitbucket" => AccountType.Bitbucket,
                "Google" => AccountType.Google,
                "Gitlab" => AccountType.Gitlab,
                "Github" => AccountType.Github,
                "Regular" => AccountType.Regular,
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                AccountType.Bitbucket => "Bitbucket",
                AccountType.Google => "Google",
                AccountType.Gitlab => "Gitlab",
                AccountType.Github => "Github",
                AccountType.Regular => "Regular",
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public enum AccessType
    {
        Cli,
        Sublime,
        Firefox,
        Chrome,
        Vscode,
        Intellij,
        Frontend,
        Api,
        Web
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class AccessTypeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, AccessType>
    {
        public global::System.String TypeName => "AccessType";
        public AccessType Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "Cli" => AccessType.Cli,
                "Sublime" => AccessType.Sublime,
                "Firefox" => AccessType.Firefox,
                "Chrome" => AccessType.Chrome,
                "VsCode" => AccessType.Vscode,
                "IntelliJ" => AccessType.Intellij,
                "Frontend" => AccessType.Frontend,
                "Api" => AccessType.Api,
                "Web" => AccessType.Web,
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                AccessType.Cli => "Cli",
                AccessType.Sublime => "Sublime",
                AccessType.Firefox => "Firefox",
                AccessType.Chrome => "Chrome",
                AccessType.Vscode => "VsCode",
                AccessType.Intellij => "IntelliJ",
                AccessType.Frontend => "Frontend",
                AccessType.Api => "Api",
                AccessType.Web => "Web",
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public enum ActionType
    {
        Projectonboardingstep9,
        Projectonboardingstep8,
        Projectonboardingstep7,
        Projectonboardingstep6,
        Projectonboardingstep5,
        Projectonboardingstep4,
        Projectonboardingstep3,
        Projectonboardingstep2,
        Projectonboardingstep1,
        Useronboardingstep9,
        Useronboardingstep8,
        Useronboardingstep7,
        Useronboardingstep6,
        Useronboardingstep5,
        Useronboardingstep4,
        Useronboardingstep3,
        Useronboardingstep2,
        Useronboardingstep1,
        Assistantrecipesearchshortcut,
        Assistantrecipesearch,
        Assistantrecipeuse,
        Fileanalysisrequest,
        Filefromprojectanalysisrequest,
        Frontendprojectanalysisviewfile,
        Frontendprojectanalysiscomplexfunctions,
        Frontendprojectanalysislongfunctions,
        Frontendprojectanalysisduplicates,
        Frontendprojectanalysisviolations,
        Frontendprojectanalysistree,
        Frontendprojectcompare,
        Frontendprojectpreferences,
        Frontenduserpreferences,
        Frontendhome
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class ActionTypeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, ActionType>
    {
        public global::System.String TypeName => "ActionType";
        public ActionType Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "ProjectOnboardingStep9" => ActionType.Projectonboardingstep9,
                "ProjectOnboardingStep8" => ActionType.Projectonboardingstep8,
                "ProjectOnboardingStep7" => ActionType.Projectonboardingstep7,
                "ProjectOnboardingStep6" => ActionType.Projectonboardingstep6,
                "ProjectOnboardingStep5" => ActionType.Projectonboardingstep5,
                "ProjectOnboardingStep4" => ActionType.Projectonboardingstep4,
                "ProjectOnboardingStep3" => ActionType.Projectonboardingstep3,
                "ProjectOnboardingStep2" => ActionType.Projectonboardingstep2,
                "ProjectOnboardingStep1" => ActionType.Projectonboardingstep1,
                "UserOnboardingStep9" => ActionType.Useronboardingstep9,
                "UserOnboardingStep8" => ActionType.Useronboardingstep8,
                "UserOnboardingStep7" => ActionType.Useronboardingstep7,
                "UserOnboardingStep6" => ActionType.Useronboardingstep6,
                "UserOnboardingStep5" => ActionType.Useronboardingstep5,
                "UserOnboardingStep4" => ActionType.Useronboardingstep4,
                "UserOnboardingStep3" => ActionType.Useronboardingstep3,
                "UserOnboardingStep2" => ActionType.Useronboardingstep2,
                "UserOnboardingStep1" => ActionType.Useronboardingstep1,
                "AssistantRecipeSearchShortcut" => ActionType.Assistantrecipesearchshortcut,
                "AssistantRecipeSearch" => ActionType.Assistantrecipesearch,
                "AssistantRecipeUse" => ActionType.Assistantrecipeuse,
                "FileAnalysisRequest" => ActionType.Fileanalysisrequest,
                "FileFromProjectAnalysisRequest" => ActionType.Filefromprojectanalysisrequest,
                "FrontendProjectAnalysisViewFile" => ActionType.Frontendprojectanalysisviewfile,
                "FrontendProjectAnalysisComplexFunctions" => ActionType.Frontendprojectanalysiscomplexfunctions,
                "FrontendProjectAnalysisLongFunctions" => ActionType.Frontendprojectanalysislongfunctions,
                "FrontendProjectAnalysisDuplicates" => ActionType.Frontendprojectanalysisduplicates,
                "FrontendProjectAnalysisViolations" => ActionType.Frontendprojectanalysisviolations,
                "FrontendProjectAnalysisTree" => ActionType.Frontendprojectanalysistree,
                "FrontendProjectCompare" => ActionType.Frontendprojectcompare,
                "FrontendProjectPreferences" => ActionType.Frontendprojectpreferences,
                "FrontendUserPreferences" => ActionType.Frontenduserpreferences,
                "FrontendHome" => ActionType.Frontendhome,
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                ActionType.Projectonboardingstep9 => "ProjectOnboardingStep9",
                ActionType.Projectonboardingstep8 => "ProjectOnboardingStep8",
                ActionType.Projectonboardingstep7 => "ProjectOnboardingStep7",
                ActionType.Projectonboardingstep6 => "ProjectOnboardingStep6",
                ActionType.Projectonboardingstep5 => "ProjectOnboardingStep5",
                ActionType.Projectonboardingstep4 => "ProjectOnboardingStep4",
                ActionType.Projectonboardingstep3 => "ProjectOnboardingStep3",
                ActionType.Projectonboardingstep2 => "ProjectOnboardingStep2",
                ActionType.Projectonboardingstep1 => "ProjectOnboardingStep1",
                ActionType.Useronboardingstep9 => "UserOnboardingStep9",
                ActionType.Useronboardingstep8 => "UserOnboardingStep8",
                ActionType.Useronboardingstep7 => "UserOnboardingStep7",
                ActionType.Useronboardingstep6 => "UserOnboardingStep6",
                ActionType.Useronboardingstep5 => "UserOnboardingStep5",
                ActionType.Useronboardingstep4 => "UserOnboardingStep4",
                ActionType.Useronboardingstep3 => "UserOnboardingStep3",
                ActionType.Useronboardingstep2 => "UserOnboardingStep2",
                ActionType.Useronboardingstep1 => "UserOnboardingStep1",
                ActionType.Assistantrecipesearchshortcut => "AssistantRecipeSearchShortcut",
                ActionType.Assistantrecipesearch => "AssistantRecipeSearch",
                ActionType.Assistantrecipeuse => "AssistantRecipeUse",
                ActionType.Fileanalysisrequest => "FileAnalysisRequest",
                ActionType.Filefromprojectanalysisrequest => "FileFromProjectAnalysisRequest",
                ActionType.Frontendprojectanalysisviewfile => "FrontendProjectAnalysisViewFile",
                ActionType.Frontendprojectanalysiscomplexfunctions => "FrontendProjectAnalysisComplexFunctions",
                ActionType.Frontendprojectanalysislongfunctions => "FrontendProjectAnalysisLongFunctions",
                ActionType.Frontendprojectanalysisduplicates => "FrontendProjectAnalysisDuplicates",
                ActionType.Frontendprojectanalysisviolations => "FrontendProjectAnalysisViolations",
                ActionType.Frontendprojectanalysistree => "FrontendProjectAnalysisTree",
                ActionType.Frontendprojectcompare => "FrontendProjectCompare",
                ActionType.Frontendprojectpreferences => "FrontendProjectPreferences",
                ActionType.Frontenduserpreferences => "FrontendUserPreferences",
                ActionType.Frontendhome => "FrontendHome",
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }
    }

    /// <summary>
    /// Represents the operation service of the GetFileData GraphQL operation
    /// <code>
    /// query GetFileData($projectId: Long!, $revision: String!, $path: String!) {
    ///   project(id: $projectId) {
    ///     __typename
    ///     id
    ///     name
    ///     analyses(status: [ Done ], revision: [ $revision ], howmany: 1, skip: 0) {
    ///       __typename
    ///       id
    ///       violations(filename: $path, howmany: 100, skip: 0) {
    ///         __typename
    ///         line
    ///         category
    ///         severity
    ///         description
    ///         filename
    ///         lineCount
    ///         language
    ///         tool
    ///         rule
    ///         ruleUrl
    ///       }
    ///       longFunctions(howmany: 100, skip: 0, filename: $path) {
    ///         __typename
    ///         filename
    ///         functionName
    ///         complexity
    ///         length
    ///         lineStart
    ///         lineEnd
    ///       }
    ///       complexFunctions(howmany: 100, skip: 0, filename: $path) {
    ///         __typename
    ///         filename
    ///         functionName
    ///         complexity
    ///         length
    ///         lineStart
    ///         lineEnd
    ///       }
    ///       duplicates(filename: $path, skip: 0, howmany: 100) {
    ///         __typename
    ///         occurrences(howmany: 100, skip: 0) {
    ///           __typename
    ///           line
    ///           filename
    ///         }
    ///         ... on Duplicate {
    ///           id
    ///         }
    ///       }
    ///       ... on Analysis {
    ///         id
    ///       }
    ///     }
    ///     ... on Project {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetFileDataQueryDocument : global::StrawberryShake.IDocument
    {
        private GetFileDataQueryDocument()
        {
        }

        public static GetFileDataQueryDocument Instance { get; } = new GetFileDataQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x28, 0x24, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x4c, 0x6f, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x70, 0x61, 0x74, 0x68, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x73, 0x28, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x20, 0x5b, 0x20, 0x44, 0x6f, 0x6e, 0x65, 0x20, 0x5d, 0x2c, 0x20, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x5b, 0x20, 0x24, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x5d, 0x2c, 0x20, 0x68, 0x6f, 0x77, 0x6d, 0x61, 0x6e, 0x79, 0x3a, 0x20, 0x31, 0x2c, 0x20, 0x73, 0x6b, 0x69, 0x70, 0x3a, 0x20, 0x30, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x70, 0x61, 0x74, 0x68, 0x2c, 0x20, 0x68, 0x6f, 0x77, 0x6d, 0x61, 0x6e, 0x79, 0x3a, 0x20, 0x31, 0x30, 0x30, 0x2c, 0x20, 0x73, 0x6b, 0x69, 0x70, 0x3a, 0x20, 0x30, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x20, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x74, 0x6f, 0x6f, 0x6c, 0x20, 0x72, 0x75, 0x6c, 0x65, 0x20, 0x72, 0x75, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x20, 0x7d, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x68, 0x6f, 0x77, 0x6d, 0x61, 0x6e, 0x79, 0x3a, 0x20, 0x31, 0x30, 0x30, 0x2c, 0x20, 0x73, 0x6b, 0x69, 0x70, 0x3a, 0x20, 0x30, 0x2c, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x70, 0x61, 0x74, 0x68, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x64, 0x20, 0x7d, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x68, 0x6f, 0x77, 0x6d, 0x61, 0x6e, 0x79, 0x3a, 0x20, 0x31, 0x30, 0x30, 0x2c, 0x20, 0x73, 0x6b, 0x69, 0x70, 0x3a, 0x20, 0x30, 0x2c, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x70, 0x61, 0x74, 0x68, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x64, 0x20, 0x7d, 0x20, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x28, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x70, 0x61, 0x74, 0x68, 0x2c, 0x20, 0x73, 0x6b, 0x69, 0x70, 0x3a, 0x20, 0x30, 0x2c, 0x20, 0x68, 0x6f, 0x77, 0x6d, 0x61, 0x6e, 0x79, 0x3a, 0x20, 0x31, 0x30, 0x30, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x28, 0x68, 0x6f, 0x77, 0x6d, 0x61, 0x6e, 0x79, 0x3a, 0x20, 0x31, 0x30, 0x30, 0x2c, 0x20, 0x73, 0x6b, 0x69, 0x70, 0x3a, 0x20, 0x30, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "07a94887503be3b9b74030c359fc39cc");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetFileData GraphQL operation
    /// <code>
    /// query GetFileData($projectId: Long!, $revision: String!, $path: String!) {
    ///   project(id: $projectId) {
    ///     __typename
    ///     id
    ///     name
    ///     analyses(status: [ Done ], revision: [ $revision ], howmany: 1, skip: 0) {
    ///       __typename
    ///       id
    ///       violations(filename: $path, howmany: 100, skip: 0) {
    ///         __typename
    ///         line
    ///         category
    ///         severity
    ///         description
    ///         filename
    ///         lineCount
    ///         language
    ///         tool
    ///         rule
    ///         ruleUrl
    ///       }
    ///       longFunctions(howmany: 100, skip: 0, filename: $path) {
    ///         __typename
    ///         filename
    ///         functionName
    ///         complexity
    ///         length
    ///         lineStart
    ///         lineEnd
    ///       }
    ///       complexFunctions(howmany: 100, skip: 0, filename: $path) {
    ///         __typename
    ///         filename
    ///         functionName
    ///         complexity
    ///         length
    ///         lineStart
    ///         lineEnd
    ///       }
    ///       duplicates(filename: $path, skip: 0, howmany: 100) {
    ///         __typename
    ///         occurrences(howmany: 100, skip: 0) {
    ///           __typename
    ///           line
    ///           filename
    ///         }
    ///         ... on Duplicate {
    ///           id
    ///         }
    ///       }
    ///       ... on Analysis {
    ///         id
    ///       }
    ///     }
    ///     ... on Project {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetFileDataQuery : global::GraphQLClient.IGetFileDataQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetFileDataResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _longFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetFileDataQuery(global::StrawberryShake.IOperationExecutor<IGetFileDataResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _longFormatter = serializerResolver.GetInputValueFormatter("Long");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetFileDataResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetFileDataResult>> ExecuteAsync(global::System.Int64 projectId, global::System.String revision, global::System.String path, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(projectId, revision, path);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetFileDataResult>> Watch(global::System.Int64 projectId, global::System.String revision, global::System.String path, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(projectId, revision, path);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int64 projectId, global::System.String revision, global::System.String path)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("projectId", FormatProjectId(projectId));
            variables.Add("revision", FormatRevision(revision));
            variables.Add("path", FormatPath(path));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetFileDataQueryDocument.Instance.Hash.Value, name: "GetFileData", document: GetFileDataQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatProjectId(global::System.Int64 value)
        {
            return _longFormatter.Format(value);
        }

        private global::System.Object? FormatRevision(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatPath(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetFileData GraphQL operation
    /// <code>
    /// query GetFileData($projectId: Long!, $revision: String!, $path: String!) {
    ///   project(id: $projectId) {
    ///     __typename
    ///     id
    ///     name
    ///     analyses(status: [ Done ], revision: [ $revision ], howmany: 1, skip: 0) {
    ///       __typename
    ///       id
    ///       violations(filename: $path, howmany: 100, skip: 0) {
    ///         __typename
    ///         line
    ///         category
    ///         severity
    ///         description
    ///         filename
    ///         lineCount
    ///         language
    ///         tool
    ///         rule
    ///         ruleUrl
    ///       }
    ///       longFunctions(howmany: 100, skip: 0, filename: $path) {
    ///         __typename
    ///         filename
    ///         functionName
    ///         complexity
    ///         length
    ///         lineStart
    ///         lineEnd
    ///       }
    ///       complexFunctions(howmany: 100, skip: 0, filename: $path) {
    ///         __typename
    ///         filename
    ///         functionName
    ///         complexity
    ///         length
    ///         lineStart
    ///         lineEnd
    ///       }
    ///       duplicates(filename: $path, skip: 0, howmany: 100) {
    ///         __typename
    ///         occurrences(howmany: 100, skip: 0) {
    ///           __typename
    ///           line
    ///           filename
    ///         }
    ///         ... on Duplicate {
    ///           id
    ///         }
    ///       }
    ///       ... on Analysis {
    ///         id
    ///       }
    ///     }
    ///     ... on Project {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetFileDataQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetFileDataResult>> ExecuteAsync(global::System.Int64 projectId, global::System.String revision, global::System.String path, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetFileDataResult>> Watch(global::System.Int64 projectId, global::System.String revision, global::System.String path, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetProjects GraphQL operation
    /// <code>
    /// query GetProjects {
    ///   projects(howmany: 100, skip: 0) {
    ///     __typename
    ///     id
    ///     name
    ///     owner {
    ///       __typename
    ///       username
    ///       ... on User {
    ///         id
    ///       }
    ///     }
    ///     group {
    ///       __typename
    ///       id
    ///       name
    ///       ... on Group {
    ///         id
    ///       }
    ///     }
    ///     violationsToIgnore {
    ///       __typename
    ///       filename
    ///       description
    ///       prefix
    ///       rule
    ///       tool
    ///       description
    ///       language
    ///     }
    ///     ... on Project {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetProjectsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetProjectsQueryDocument()
        {
        }

        public static GetProjectsQueryDocument Instance { get; } = new GetProjectsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x28, 0x68, 0x6f, 0x77, 0x6d, 0x61, 0x6e, 0x79, 0x3a, 0x20, 0x31, 0x30, 0x30, 0x2c, 0x20, 0x73, 0x6b, 0x69, 0x70, 0x3a, 0x20, 0x30, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x20, 0x72, 0x75, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x6f, 0x6c, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "055f76c1ce5cc84c913aba93680da90e");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetProjects GraphQL operation
    /// <code>
    /// query GetProjects {
    ///   projects(howmany: 100, skip: 0) {
    ///     __typename
    ///     id
    ///     name
    ///     owner {
    ///       __typename
    ///       username
    ///       ... on User {
    ///         id
    ///       }
    ///     }
    ///     group {
    ///       __typename
    ///       id
    ///       name
    ///       ... on Group {
    ///         id
    ///       }
    ///     }
    ///     violationsToIgnore {
    ///       __typename
    ///       filename
    ///       description
    ///       prefix
    ///       rule
    ///       tool
    ///       description
    ///       language
    ///     }
    ///     ... on Project {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetProjectsQuery : global::GraphQLClient.IGetProjectsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetProjectsResult> _operationExecutor;
        public GetProjectsQuery(global::StrawberryShake.IOperationExecutor<IGetProjectsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetProjectsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetProjectsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetProjectsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetProjectsQueryDocument.Instance.Hash.Value, name: "GetProjects", document: GetProjectsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetProjects GraphQL operation
    /// <code>
    /// query GetProjects {
    ///   projects(howmany: 100, skip: 0) {
    ///     __typename
    ///     id
    ///     name
    ///     owner {
    ///       __typename
    ///       username
    ///       ... on User {
    ///         id
    ///       }
    ///     }
    ///     group {
    ///       __typename
    ///       id
    ///       name
    ///       ... on Group {
    ///         id
    ///       }
    ///     }
    ///     violationsToIgnore {
    ///       __typename
    ///       filename
    ///       description
    ///       prefix
    ///       rule
    ///       tool
    ///       description
    ///       language
    ///     }
    ///     ... on Project {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetProjectsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetProjectsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetProjectsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetRecipesForClient GraphQL operation
    /// <code>
    /// query GetRecipesForClient($fingerprint: String, $filename: String, $keywords: [String!]!, $dependencies: [String!]!, $parameters: String, $language: LanguageEnumeration!) {
    ///   getRecipesForClient(fingerprint: $fingerprint, keywords: $keywords, filename: $filename, dependencies: $dependencies, parameters: $parameters, language: $language) {
    ///     __typename
    ///     id
    ///     name
    ///     code
    ///     jetbrainsFormat
    ///     keywords
    ///     imports
    ///     language
    ///     description
    ///     shortcut
    ///     ... on AssistantRecipe {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientQueryDocument : global::StrawberryShake.IDocument
    {
        private GetRecipesForClientQueryDocument()
        {
        }

        public static GetRecipesForClientQueryDocument Instance { get; } = new GetRecipesForClientQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x28, 0x24, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x3a, 0x20, 0x5b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x5d, 0x21, 0x2c, 0x20, 0x24, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x3a, 0x20, 0x5b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x5d, 0x21, 0x2c, 0x20, 0x24, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a, 0x20, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x67, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x28, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2c, 0x20, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x3a, 0x20, 0x24, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2c, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x3a, 0x20, 0x24, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2c, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x20, 0x24, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2c, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a, 0x20, 0x24, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6a, 0x65, 0x74, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "b2e5b396d8f0e4c4f476253f61c62d5b");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetRecipesForClient GraphQL operation
    /// <code>
    /// query GetRecipesForClient($fingerprint: String, $filename: String, $keywords: [String!]!, $dependencies: [String!]!, $parameters: String, $language: LanguageEnumeration!) {
    ///   getRecipesForClient(fingerprint: $fingerprint, keywords: $keywords, filename: $filename, dependencies: $dependencies, parameters: $parameters, language: $language) {
    ///     __typename
    ///     id
    ///     name
    ///     code
    ///     jetbrainsFormat
    ///     keywords
    ///     imports
    ///     language
    ///     description
    ///     shortcut
    ///     ... on AssistantRecipe {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientQuery : global::GraphQLClient.IGetRecipesForClientQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetRecipesForClientResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _languageEnumerationFormatter;
        public GetRecipesForClientQuery(global::StrawberryShake.IOperationExecutor<IGetRecipesForClientResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _languageEnumerationFormatter = serializerResolver.GetInputValueFormatter("LanguageEnumeration");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetRecipesForClientResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetRecipesForClientResult>> ExecuteAsync(global::System.String? fingerprint, global::System.String? filename, global::System.Collections.Generic.IReadOnlyList<global::System.String> keywords, global::System.Collections.Generic.IReadOnlyList<global::System.String> dependencies, global::System.String? parameters, global::GraphQLClient.LanguageEnumeration language, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(fingerprint, filename, keywords, dependencies, parameters, language);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetRecipesForClientResult>> Watch(global::System.String? fingerprint, global::System.String? filename, global::System.Collections.Generic.IReadOnlyList<global::System.String> keywords, global::System.Collections.Generic.IReadOnlyList<global::System.String> dependencies, global::System.String? parameters, global::GraphQLClient.LanguageEnumeration language, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(fingerprint, filename, keywords, dependencies, parameters, language);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? fingerprint, global::System.String? filename, global::System.Collections.Generic.IReadOnlyList<global::System.String> keywords, global::System.Collections.Generic.IReadOnlyList<global::System.String> dependencies, global::System.String? parameters, global::GraphQLClient.LanguageEnumeration language)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("fingerprint", FormatFingerprint(fingerprint));
            variables.Add("filename", FormatFilename(filename));
            variables.Add("keywords", FormatKeywords(keywords));
            variables.Add("dependencies", FormatDependencies(dependencies));
            variables.Add("parameters", FormatParameters(parameters));
            variables.Add("language", FormatLanguage(language));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetRecipesForClientQueryDocument.Instance.Hash.Value, name: "GetRecipesForClient", document: GetRecipesForClientQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatFingerprint(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatFilename(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatKeywords(global::System.Collections.Generic.IReadOnlyList<global::System.String> value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            var value_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var value_elm in value)
            {
                if (value_elm is null)
                {
                    throw new global::System.ArgumentNullException(nameof(value_elm));
                }

                value_list.Add(_stringFormatter.Format(value_elm));
            }

            return value_list;
        }

        private global::System.Object? FormatDependencies(global::System.Collections.Generic.IReadOnlyList<global::System.String> value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            var value_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var value_elm in value)
            {
                if (value_elm is null)
                {
                    throw new global::System.ArgumentNullException(nameof(value_elm));
                }

                value_list.Add(_stringFormatter.Format(value_elm));
            }

            return value_list;
        }

        private global::System.Object? FormatParameters(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatLanguage(global::GraphQLClient.LanguageEnumeration value)
        {
            return _languageEnumerationFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetRecipesForClient GraphQL operation
    /// <code>
    /// query GetRecipesForClient($fingerprint: String, $filename: String, $keywords: [String!]!, $dependencies: [String!]!, $parameters: String, $language: LanguageEnumeration!) {
    ///   getRecipesForClient(fingerprint: $fingerprint, keywords: $keywords, filename: $filename, dependencies: $dependencies, parameters: $parameters, language: $language) {
    ///     __typename
    ///     id
    ///     name
    ///     code
    ///     jetbrainsFormat
    ///     keywords
    ///     imports
    ///     language
    ///     description
    ///     shortcut
    ///     ... on AssistantRecipe {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetRecipesForClientQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetRecipesForClientResult>> ExecuteAsync(global::System.String? fingerprint, global::System.String? filename, global::System.Collections.Generic.IReadOnlyList<global::System.String> keywords, global::System.Collections.Generic.IReadOnlyList<global::System.String> dependencies, global::System.String? parameters, global::GraphQLClient.LanguageEnumeration language, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetRecipesForClientResult>> Watch(global::System.String? fingerprint, global::System.String? filename, global::System.Collections.Generic.IReadOnlyList<global::System.String> keywords, global::System.Collections.Generic.IReadOnlyList<global::System.String> dependencies, global::System.String? parameters, global::GraphQLClient.LanguageEnumeration language, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetRecipesForClientByShortcut GraphQL operation
    /// <code>
    /// query GetRecipesForClientByShortcut($fingerprint: String, $filename: String, $term: String, $dependencies: [String!]!, $parameters: String, $language: LanguageEnumeration!, $onlyPublic: Boolean, $onlyPrivate: Boolean, $onlySubscribed: Boolean) {
    ///   getRecipesForClientByShortcut(fingerprint: $fingerprint, term: $term, filename: $filename, dependencies: $dependencies, parameters: $parameters, language: $language, onlyPublic: $onlyPublic, onlyPrivate: $onlyPrivate, onlySubscribed: $onlySubscribed) {
    ///     __typename
    ///     id
    ///     name
    ///     code
    ///     keywords
    ///     imports
    ///     language
    ///     description
    ///     shortcut
    ///     ... on AssistantRecipe {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientByShortcutQueryDocument : global::StrawberryShake.IDocument
    {
        private GetRecipesForClientByShortcutQueryDocument()
        {
        }

        public static GetRecipesForClientByShortcutQueryDocument Instance { get; } = new GetRecipesForClientByShortcutQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x28, 0x24, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x74, 0x65, 0x72, 0x6d, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x3a, 0x20, 0x5b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x5d, 0x21, 0x2c, 0x20, 0x24, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a, 0x20, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x21, 0x2c, 0x20, 0x24, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x3a, 0x20, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x2c, 0x20, 0x24, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x2c, 0x20, 0x24, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x3a, 0x20, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x29, 0x20, 0x7b, 0x20, 0x67, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x28, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2c, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x3a, 0x20, 0x24, 0x74, 0x65, 0x72, 0x6d, 0x2c, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x3a, 0x20, 0x24, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2c, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x20, 0x24, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2c, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a, 0x20, 0x24, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2c, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x3a, 0x20, 0x24, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2c, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x24, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x3a, 0x20, 0x24, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "85720eb76e6802e97e1f49df073981e9");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetRecipesForClientByShortcut GraphQL operation
    /// <code>
    /// query GetRecipesForClientByShortcut($fingerprint: String, $filename: String, $term: String, $dependencies: [String!]!, $parameters: String, $language: LanguageEnumeration!, $onlyPublic: Boolean, $onlyPrivate: Boolean, $onlySubscribed: Boolean) {
    ///   getRecipesForClientByShortcut(fingerprint: $fingerprint, term: $term, filename: $filename, dependencies: $dependencies, parameters: $parameters, language: $language, onlyPublic: $onlyPublic, onlyPrivate: $onlyPrivate, onlySubscribed: $onlySubscribed) {
    ///     __typename
    ///     id
    ///     name
    ///     code
    ///     keywords
    ///     imports
    ///     language
    ///     description
    ///     shortcut
    ///     ... on AssistantRecipe {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientByShortcutQuery : global::GraphQLClient.IGetRecipesForClientByShortcutQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetRecipesForClientByShortcutResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _languageEnumerationFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter;
        public GetRecipesForClientByShortcutQuery(global::StrawberryShake.IOperationExecutor<IGetRecipesForClientByShortcutResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _languageEnumerationFormatter = serializerResolver.GetInputValueFormatter("LanguageEnumeration");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetRecipesForClientByShortcutResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetRecipesForClientByShortcutResult>> ExecuteAsync(global::System.String? fingerprint, global::System.String? filename, global::System.String? term, global::System.Collections.Generic.IReadOnlyList<global::System.String> dependencies, global::System.String? parameters, global::GraphQLClient.LanguageEnumeration language, global::System.Boolean? onlyPublic, global::System.Boolean? onlyPrivate, global::System.Boolean? onlySubscribed, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(fingerprint, filename, term, dependencies, parameters, language, onlyPublic, onlyPrivate, onlySubscribed);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetRecipesForClientByShortcutResult>> Watch(global::System.String? fingerprint, global::System.String? filename, global::System.String? term, global::System.Collections.Generic.IReadOnlyList<global::System.String> dependencies, global::System.String? parameters, global::GraphQLClient.LanguageEnumeration language, global::System.Boolean? onlyPublic, global::System.Boolean? onlyPrivate, global::System.Boolean? onlySubscribed, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(fingerprint, filename, term, dependencies, parameters, language, onlyPublic, onlyPrivate, onlySubscribed);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? fingerprint, global::System.String? filename, global::System.String? term, global::System.Collections.Generic.IReadOnlyList<global::System.String> dependencies, global::System.String? parameters, global::GraphQLClient.LanguageEnumeration language, global::System.Boolean? onlyPublic, global::System.Boolean? onlyPrivate, global::System.Boolean? onlySubscribed)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("fingerprint", FormatFingerprint(fingerprint));
            variables.Add("filename", FormatFilename(filename));
            variables.Add("term", FormatTerm(term));
            variables.Add("dependencies", FormatDependencies(dependencies));
            variables.Add("parameters", FormatParameters(parameters));
            variables.Add("language", FormatLanguage(language));
            variables.Add("onlyPublic", FormatOnlyPublic(onlyPublic));
            variables.Add("onlyPrivate", FormatOnlyPrivate(onlyPrivate));
            variables.Add("onlySubscribed", FormatOnlySubscribed(onlySubscribed));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetRecipesForClientByShortcutQueryDocument.Instance.Hash.Value, name: "GetRecipesForClientByShortcut", document: GetRecipesForClientByShortcutQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatFingerprint(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatFilename(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatTerm(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatDependencies(global::System.Collections.Generic.IReadOnlyList<global::System.String> value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            var value_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var value_elm in value)
            {
                if (value_elm is null)
                {
                    throw new global::System.ArgumentNullException(nameof(value_elm));
                }

                value_list.Add(_stringFormatter.Format(value_elm));
            }

            return value_list;
        }

        private global::System.Object? FormatParameters(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatLanguage(global::GraphQLClient.LanguageEnumeration value)
        {
            return _languageEnumerationFormatter.Format(value);
        }

        private global::System.Object? FormatOnlyPublic(global::System.Boolean? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _booleanFormatter.Format(value);
            }
        }

        private global::System.Object? FormatOnlyPrivate(global::System.Boolean? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _booleanFormatter.Format(value);
            }
        }

        private global::System.Object? FormatOnlySubscribed(global::System.Boolean? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _booleanFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetRecipesForClientByShortcut GraphQL operation
    /// <code>
    /// query GetRecipesForClientByShortcut($fingerprint: String, $filename: String, $term: String, $dependencies: [String!]!, $parameters: String, $language: LanguageEnumeration!, $onlyPublic: Boolean, $onlyPrivate: Boolean, $onlySubscribed: Boolean) {
    ///   getRecipesForClientByShortcut(fingerprint: $fingerprint, term: $term, filename: $filename, dependencies: $dependencies, parameters: $parameters, language: $language, onlyPublic: $onlyPublic, onlyPrivate: $onlyPrivate, onlySubscribed: $onlySubscribed) {
    ///     __typename
    ///     id
    ///     name
    ///     code
    ///     keywords
    ///     imports
    ///     language
    ///     description
    ///     shortcut
    ///     ... on AssistantRecipe {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetRecipesForClientByShortcutQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetRecipesForClientByShortcutResult>> ExecuteAsync(global::System.String? fingerprint, global::System.String? filename, global::System.String? term, global::System.Collections.Generic.IReadOnlyList<global::System.String> dependencies, global::System.String? parameters, global::GraphQLClient.LanguageEnumeration language, global::System.Boolean? onlyPublic, global::System.Boolean? onlyPrivate, global::System.Boolean? onlySubscribed, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetRecipesForClientByShortcutResult>> Watch(global::System.String? fingerprint, global::System.String? filename, global::System.String? term, global::System.Collections.Generic.IReadOnlyList<global::System.String> dependencies, global::System.String? parameters, global::GraphQLClient.LanguageEnumeration language, global::System.Boolean? onlyPublic, global::System.Boolean? onlyPrivate, global::System.Boolean? onlySubscribed, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetRecipesForClientByShortcutLastTimestamp GraphQL operation
    /// <code>
    /// query GetRecipesForClientByShortcutLastTimestamp($fingerprint: String, $dependencies: [String!]!, $language: LanguageEnumeration!) {
    ///   getRecipesForClientByShortcutLastTimestamp(fingerprint: $fingerprint, dependencies: $dependencies, language: $language)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientByShortcutLastTimestampQueryDocument : global::StrawberryShake.IDocument
    {
        private GetRecipesForClientByShortcutLastTimestampQueryDocument()
        {
        }

        public static GetRecipesForClientByShortcutLastTimestampQueryDocument Instance { get; } = new GetRecipesForClientByShortcutLastTimestampQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x28, 0x24, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x3a, 0x20, 0x5b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x5d, 0x21, 0x2c, 0x20, 0x24, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a, 0x20, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x67, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x28, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2c, 0x20, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x3a, 0x20, 0x24, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2c, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a, 0x20, 0x24, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x29, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "7aa597df075e4db798c5a9ba4f276a4f");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetRecipesForClientByShortcutLastTimestamp GraphQL operation
    /// <code>
    /// query GetRecipesForClientByShortcutLastTimestamp($fingerprint: String, $dependencies: [String!]!, $language: LanguageEnumeration!) {
    ///   getRecipesForClientByShortcutLastTimestamp(fingerprint: $fingerprint, dependencies: $dependencies, language: $language)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientByShortcutLastTimestampQuery : global::GraphQLClient.IGetRecipesForClientByShortcutLastTimestampQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetRecipesForClientByShortcutLastTimestampResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _languageEnumerationFormatter;
        public GetRecipesForClientByShortcutLastTimestampQuery(global::StrawberryShake.IOperationExecutor<IGetRecipesForClientByShortcutLastTimestampResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _languageEnumerationFormatter = serializerResolver.GetInputValueFormatter("LanguageEnumeration");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetRecipesForClientByShortcutLastTimestampResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetRecipesForClientByShortcutLastTimestampResult>> ExecuteAsync(global::System.String? fingerprint, global::System.Collections.Generic.IReadOnlyList<global::System.String> dependencies, global::GraphQLClient.LanguageEnumeration language, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(fingerprint, dependencies, language);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetRecipesForClientByShortcutLastTimestampResult>> Watch(global::System.String? fingerprint, global::System.Collections.Generic.IReadOnlyList<global::System.String> dependencies, global::GraphQLClient.LanguageEnumeration language, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(fingerprint, dependencies, language);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? fingerprint, global::System.Collections.Generic.IReadOnlyList<global::System.String> dependencies, global::GraphQLClient.LanguageEnumeration language)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("fingerprint", FormatFingerprint(fingerprint));
            variables.Add("dependencies", FormatDependencies(dependencies));
            variables.Add("language", FormatLanguage(language));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetRecipesForClientByShortcutLastTimestampQueryDocument.Instance.Hash.Value, name: "GetRecipesForClientByShortcutLastTimestamp", document: GetRecipesForClientByShortcutLastTimestampQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatFingerprint(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatDependencies(global::System.Collections.Generic.IReadOnlyList<global::System.String> value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            var value_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var value_elm in value)
            {
                if (value_elm is null)
                {
                    throw new global::System.ArgumentNullException(nameof(value_elm));
                }

                value_list.Add(_stringFormatter.Format(value_elm));
            }

            return value_list;
        }

        private global::System.Object? FormatLanguage(global::GraphQLClient.LanguageEnumeration value)
        {
            return _languageEnumerationFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetRecipesForClientByShortcutLastTimestamp GraphQL operation
    /// <code>
    /// query GetRecipesForClientByShortcutLastTimestamp($fingerprint: String, $dependencies: [String!]!, $language: LanguageEnumeration!) {
    ///   getRecipesForClientByShortcutLastTimestamp(fingerprint: $fingerprint, dependencies: $dependencies, language: $language)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetRecipesForClientByShortcutLastTimestampQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetRecipesForClientByShortcutLastTimestampResult>> ExecuteAsync(global::System.String? fingerprint, global::System.Collections.Generic.IReadOnlyList<global::System.String> dependencies, global::GraphQLClient.LanguageEnumeration language, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetRecipesForClientByShortcutLastTimestampResult>> Watch(global::System.String? fingerprint, global::System.Collections.Generic.IReadOnlyList<global::System.String> dependencies, global::GraphQLClient.LanguageEnumeration language, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetRecipesForClientSemantic GraphQL operation
    /// <code>
    /// query GetRecipesForClientSemantic($term: String, $onlyPublic: Boolean, $onlyPrivate: Boolean, $onlySubscribed: Boolean, $filename: String, $dependencies: [String!]!, $parameters: String, $languages: [LanguageEnumeration!], $howmany: Long!, $skip: Long!) {
    ///   assistantRecipesSemanticSearch(term: $term, onlyPublic: $onlyPublic, onlyPrivate: $onlyPrivate, onlySubscribed: $onlySubscribed, filename: $filename, dependencies: $dependencies, parameters: $parameters, languages: $languages, howmany: $howmany, skip: $skip) {
    ///     __typename
    ///     id
    ///     name
    ///     code
    ///     jetbrainsFormat
    ///     presentableFormat
    ///     keywords
    ///     imports
    ///     language
    ///     isPublic
    ///     description
    ///     shortcut
    ///     owner {
    ///       __typename
    ///       id
    ///       displayName
    ///       slug
    ///       hasSlug
    ///       accountType
    ///       ... on PublicUser {
    ///         id
    ///       }
    ///     }
    ///     groups {
    ///       __typename
    ///       id
    ///       name
    ///       ... on Group {
    ///         id
    ///       }
    ///     }
    ///     ... on AssistantRecipe {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientSemanticQueryDocument : global::StrawberryShake.IDocument
    {
        private GetRecipesForClientSemanticQueryDocument()
        {
        }

        public static GetRecipesForClientSemanticQueryDocument Instance { get; } = new GetRecipesForClientSemanticQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x28, 0x24, 0x74, 0x65, 0x72, 0x6d, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x3a, 0x20, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x2c, 0x20, 0x24, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x2c, 0x20, 0x24, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x3a, 0x20, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x2c, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x3a, 0x20, 0x5b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x5d, 0x21, 0x2c, 0x20, 0x24, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x3a, 0x20, 0x5b, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x21, 0x5d, 0x2c, 0x20, 0x24, 0x68, 0x6f, 0x77, 0x6d, 0x61, 0x6e, 0x79, 0x3a, 0x20, 0x4c, 0x6f, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x73, 0x6b, 0x69, 0x70, 0x3a, 0x20, 0x4c, 0x6f, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x28, 0x74, 0x65, 0x72, 0x6d, 0x3a, 0x20, 0x24, 0x74, 0x65, 0x72, 0x6d, 0x2c, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x3a, 0x20, 0x24, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2c, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x24, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x3a, 0x20, 0x24, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x2c, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x3a, 0x20, 0x24, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2c, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x20, 0x24, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2c, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x3a, 0x20, 0x24, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x2c, 0x20, 0x68, 0x6f, 0x77, 0x6d, 0x61, 0x6e, 0x79, 0x3a, 0x20, 0x24, 0x68, 0x6f, 0x77, 0x6d, 0x61, 0x6e, 0x79, 0x2c, 0x20, 0x73, 0x6b, 0x69, 0x70, 0x3a, 0x20, 0x24, 0x73, 0x6b, 0x69, 0x70, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6a, 0x65, 0x74, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x6c, 0x75, 0x67, 0x20, 0x68, 0x61, 0x73, 0x53, 0x6c, 0x75, 0x67, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "cf474eaddf40ed952b99ec5e60606a72");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetRecipesForClientSemantic GraphQL operation
    /// <code>
    /// query GetRecipesForClientSemantic($term: String, $onlyPublic: Boolean, $onlyPrivate: Boolean, $onlySubscribed: Boolean, $filename: String, $dependencies: [String!]!, $parameters: String, $languages: [LanguageEnumeration!], $howmany: Long!, $skip: Long!) {
    ///   assistantRecipesSemanticSearch(term: $term, onlyPublic: $onlyPublic, onlyPrivate: $onlyPrivate, onlySubscribed: $onlySubscribed, filename: $filename, dependencies: $dependencies, parameters: $parameters, languages: $languages, howmany: $howmany, skip: $skip) {
    ///     __typename
    ///     id
    ///     name
    ///     code
    ///     jetbrainsFormat
    ///     presentableFormat
    ///     keywords
    ///     imports
    ///     language
    ///     isPublic
    ///     description
    ///     shortcut
    ///     owner {
    ///       __typename
    ///       id
    ///       displayName
    ///       slug
    ///       hasSlug
    ///       accountType
    ///       ... on PublicUser {
    ///         id
    ///       }
    ///     }
    ///     groups {
    ///       __typename
    ///       id
    ///       name
    ///       ... on Group {
    ///         id
    ///       }
    ///     }
    ///     ... on AssistantRecipe {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientSemanticQuery : global::GraphQLClient.IGetRecipesForClientSemanticQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetRecipesForClientSemanticResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _languageEnumerationFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _longFormatter;
        public GetRecipesForClientSemanticQuery(global::StrawberryShake.IOperationExecutor<IGetRecipesForClientSemanticResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
            _languageEnumerationFormatter = serializerResolver.GetInputValueFormatter("LanguageEnumeration");
            _longFormatter = serializerResolver.GetInputValueFormatter("Long");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetRecipesForClientSemanticResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetRecipesForClientSemanticResult>> ExecuteAsync(global::System.String? term, global::System.Boolean? onlyPublic, global::System.Boolean? onlyPrivate, global::System.Boolean? onlySubscribed, global::System.String? filename, global::System.Collections.Generic.IReadOnlyList<global::System.String> dependencies, global::System.String? parameters, global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.LanguageEnumeration>? languages, global::System.Int64 howmany, global::System.Int64 skip, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(term, onlyPublic, onlyPrivate, onlySubscribed, filename, dependencies, parameters, languages, howmany, skip);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetRecipesForClientSemanticResult>> Watch(global::System.String? term, global::System.Boolean? onlyPublic, global::System.Boolean? onlyPrivate, global::System.Boolean? onlySubscribed, global::System.String? filename, global::System.Collections.Generic.IReadOnlyList<global::System.String> dependencies, global::System.String? parameters, global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.LanguageEnumeration>? languages, global::System.Int64 howmany, global::System.Int64 skip, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(term, onlyPublic, onlyPrivate, onlySubscribed, filename, dependencies, parameters, languages, howmany, skip);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? term, global::System.Boolean? onlyPublic, global::System.Boolean? onlyPrivate, global::System.Boolean? onlySubscribed, global::System.String? filename, global::System.Collections.Generic.IReadOnlyList<global::System.String> dependencies, global::System.String? parameters, global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.LanguageEnumeration>? languages, global::System.Int64 howmany, global::System.Int64 skip)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("term", FormatTerm(term));
            variables.Add("onlyPublic", FormatOnlyPublic(onlyPublic));
            variables.Add("onlyPrivate", FormatOnlyPrivate(onlyPrivate));
            variables.Add("onlySubscribed", FormatOnlySubscribed(onlySubscribed));
            variables.Add("filename", FormatFilename(filename));
            variables.Add("dependencies", FormatDependencies(dependencies));
            variables.Add("parameters", FormatParameters(parameters));
            variables.Add("languages", FormatLanguages(languages));
            variables.Add("howmany", FormatHowmany(howmany));
            variables.Add("skip", FormatSkip(skip));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetRecipesForClientSemanticQueryDocument.Instance.Hash.Value, name: "GetRecipesForClientSemantic", document: GetRecipesForClientSemanticQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatTerm(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatOnlyPublic(global::System.Boolean? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _booleanFormatter.Format(value);
            }
        }

        private global::System.Object? FormatOnlyPrivate(global::System.Boolean? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _booleanFormatter.Format(value);
            }
        }

        private global::System.Object? FormatOnlySubscribed(global::System.Boolean? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _booleanFormatter.Format(value);
            }
        }

        private global::System.Object? FormatFilename(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatDependencies(global::System.Collections.Generic.IReadOnlyList<global::System.String> value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            var value_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var value_elm in value)
            {
                if (value_elm is null)
                {
                    throw new global::System.ArgumentNullException(nameof(value_elm));
                }

                value_list.Add(_stringFormatter.Format(value_elm));
            }

            return value_list;
        }

        private global::System.Object? FormatParameters(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatLanguages(global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.LanguageEnumeration>? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                var value_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var value_elm in value)
                {
                    value_list.Add(_languageEnumerationFormatter.Format(value_elm));
                }

                return value_list;
            }
        }

        private global::System.Object? FormatHowmany(global::System.Int64 value)
        {
            return _longFormatter.Format(value);
        }

        private global::System.Object? FormatSkip(global::System.Int64 value)
        {
            return _longFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetRecipesForClientSemantic GraphQL operation
    /// <code>
    /// query GetRecipesForClientSemantic($term: String, $onlyPublic: Boolean, $onlyPrivate: Boolean, $onlySubscribed: Boolean, $filename: String, $dependencies: [String!]!, $parameters: String, $languages: [LanguageEnumeration!], $howmany: Long!, $skip: Long!) {
    ///   assistantRecipesSemanticSearch(term: $term, onlyPublic: $onlyPublic, onlyPrivate: $onlyPrivate, onlySubscribed: $onlySubscribed, filename: $filename, dependencies: $dependencies, parameters: $parameters, languages: $languages, howmany: $howmany, skip: $skip) {
    ///     __typename
    ///     id
    ///     name
    ///     code
    ///     jetbrainsFormat
    ///     presentableFormat
    ///     keywords
    ///     imports
    ///     language
    ///     isPublic
    ///     description
    ///     shortcut
    ///     owner {
    ///       __typename
    ///       id
    ///       displayName
    ///       slug
    ///       hasSlug
    ///       accountType
    ///       ... on PublicUser {
    ///         id
    ///       }
    ///     }
    ///     groups {
    ///       __typename
    ///       id
    ///       name
    ///       ... on Group {
    ///         id
    ///       }
    ///     }
    ///     ... on AssistantRecipe {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetRecipesForClientSemanticQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetRecipesForClientSemanticResult>> ExecuteAsync(global::System.String? term, global::System.Boolean? onlyPublic, global::System.Boolean? onlyPrivate, global::System.Boolean? onlySubscribed, global::System.String? filename, global::System.Collections.Generic.IReadOnlyList<global::System.String> dependencies, global::System.String? parameters, global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.LanguageEnumeration>? languages, global::System.Int64 howmany, global::System.Int64 skip, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetRecipesForClientSemanticResult>> Watch(global::System.String? term, global::System.Boolean? onlyPublic, global::System.Boolean? onlyPrivate, global::System.Boolean? onlySubscribed, global::System.String? filename, global::System.Collections.Generic.IReadOnlyList<global::System.String> dependencies, global::System.String? parameters, global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.LanguageEnumeration>? languages, global::System.Int64 howmany, global::System.Int64 skip, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetUser GraphQL operation
    /// <code>
    /// query GetUser {
    ///   user {
    ///     __typename
    ///     username
    ///     ... on User {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetUserQueryDocument : global::StrawberryShake.IDocument
    {
        private GetUserQueryDocument()
        {
        }

        public static GetUserQueryDocument Instance { get; } = new GetUserQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "62f5d18d760f2f3d7c1abc120117d99b");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetUser GraphQL operation
    /// <code>
    /// query GetUser {
    ///   user {
    ///     __typename
    ///     username
    ///     ... on User {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetUserQuery : global::GraphQLClient.IGetUserQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetUserResult> _operationExecutor;
        public GetUserQuery(global::StrawberryShake.IOperationExecutor<IGetUserResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetUserResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetUserResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetUserResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetUserQueryDocument.Instance.Hash.Value, name: "GetUser", document: GetUserQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetUser GraphQL operation
    /// <code>
    /// query GetUser {
    ///   user {
    ///     __typename
    ///     username
    ///     ... on User {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IGetUserQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetUserResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetUserResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the AddViolationToIgnore GraphQL operation
    /// <code>
    /// mutation AddViolationToIgnore($projectId: Long!, $rule: String!, $tool: String!, $language: LanguageEnumeration!, $filename: String, $prefix: String, $description: String) {
    ///   addViolationToIgnore(projectId: $projectId, rule: $rule, tool: $tool, language: $language, filename: $filename, description: $description, prefix: $prefix) {
    ///     __typename
    ///     rule
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class AddViolationToIgnoreMutationDocument : global::StrawberryShake.IDocument
    {
        private AddViolationToIgnoreMutationDocument()
        {
        }

        public static AddViolationToIgnoreMutationDocument Instance { get; } = new AddViolationToIgnoreMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x64, 0x64, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x28, 0x24, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x4c, 0x6f, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x72, 0x75, 0x6c, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x74, 0x6f, 0x6f, 0x6c, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a, 0x20, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x21, 0x2c, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x64, 0x64, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x28, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x2c, 0x20, 0x72, 0x75, 0x6c, 0x65, 0x3a, 0x20, 0x24, 0x72, 0x75, 0x6c, 0x65, 0x2c, 0x20, 0x74, 0x6f, 0x6f, 0x6c, 0x3a, 0x20, 0x24, 0x74, 0x6f, 0x6f, 0x6c, 0x2c, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a, 0x20, 0x24, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2c, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x24, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x3a, 0x20, 0x24, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x75, 0x6c, 0x65, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "982e3db40647fac298fa8b7decb60292");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AddViolationToIgnore GraphQL operation
    /// <code>
    /// mutation AddViolationToIgnore($projectId: Long!, $rule: String!, $tool: String!, $language: LanguageEnumeration!, $filename: String, $prefix: String, $description: String) {
    ///   addViolationToIgnore(projectId: $projectId, rule: $rule, tool: $tool, language: $language, filename: $filename, description: $description, prefix: $prefix) {
    ///     __typename
    ///     rule
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class AddViolationToIgnoreMutation : global::GraphQLClient.IAddViolationToIgnoreMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAddViolationToIgnoreResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _longFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _languageEnumerationFormatter;
        public AddViolationToIgnoreMutation(global::StrawberryShake.IOperationExecutor<IAddViolationToIgnoreResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _longFormatter = serializerResolver.GetInputValueFormatter("Long");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _languageEnumerationFormatter = serializerResolver.GetInputValueFormatter("LanguageEnumeration");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddViolationToIgnoreResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddViolationToIgnoreResult>> ExecuteAsync(global::System.Int64 projectId, global::System.String rule, global::System.String tool, global::GraphQLClient.LanguageEnumeration language, global::System.String? filename, global::System.String? prefix, global::System.String? description, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(projectId, rule, tool, language, filename, prefix, description);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddViolationToIgnoreResult>> Watch(global::System.Int64 projectId, global::System.String rule, global::System.String tool, global::GraphQLClient.LanguageEnumeration language, global::System.String? filename, global::System.String? prefix, global::System.String? description, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(projectId, rule, tool, language, filename, prefix, description);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int64 projectId, global::System.String rule, global::System.String tool, global::GraphQLClient.LanguageEnumeration language, global::System.String? filename, global::System.String? prefix, global::System.String? description)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("projectId", FormatProjectId(projectId));
            variables.Add("rule", FormatRule(rule));
            variables.Add("tool", FormatTool(tool));
            variables.Add("language", FormatLanguage(language));
            variables.Add("filename", FormatFilename(filename));
            variables.Add("prefix", FormatPrefix(prefix));
            variables.Add("description", FormatDescription(description));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AddViolationToIgnoreMutationDocument.Instance.Hash.Value, name: "AddViolationToIgnore", document: AddViolationToIgnoreMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatProjectId(global::System.Int64 value)
        {
            return _longFormatter.Format(value);
        }

        private global::System.Object? FormatRule(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatTool(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatLanguage(global::GraphQLClient.LanguageEnumeration value)
        {
            return _languageEnumerationFormatter.Format(value);
        }

        private global::System.Object? FormatFilename(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatPrefix(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatDescription(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AddViolationToIgnore GraphQL operation
    /// <code>
    /// mutation AddViolationToIgnore($projectId: Long!, $rule: String!, $tool: String!, $language: LanguageEnumeration!, $filename: String, $prefix: String, $description: String) {
    ///   addViolationToIgnore(projectId: $projectId, rule: $rule, tool: $tool, language: $language, filename: $filename, description: $description, prefix: $prefix) {
    ///     __typename
    ///     rule
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IAddViolationToIgnoreMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddViolationToIgnoreResult>> ExecuteAsync(global::System.Int64 projectId, global::System.String rule, global::System.String tool, global::GraphQLClient.LanguageEnumeration language, global::System.String? filename, global::System.String? prefix, global::System.String? description, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddViolationToIgnoreResult>> Watch(global::System.Int64 projectId, global::System.String rule, global::System.String tool, global::GraphQLClient.LanguageEnumeration language, global::System.String? filename, global::System.String? prefix, global::System.String? description, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the RecordAccess GraphQL operation
    /// <code>
    /// mutation RecordAccess($accessType: AccessType!, $actionType: ActionType!) {
    ///   recordAccess(accessType: $accessType, actionType: $actionType)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class RecordAccessMutationDocument : global::StrawberryShake.IDocument
    {
        private RecordAccessMutationDocument()
        {
        }

        public static RecordAccessMutationDocument Instance { get; } = new RecordAccessMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x28, 0x24, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x21, 0x2c, 0x20, 0x24, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x28, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x24, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x2c, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x24, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x29, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "2485db20e15a88af91f6097978cfd66f");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the RecordAccess GraphQL operation
    /// <code>
    /// mutation RecordAccess($accessType: AccessType!, $actionType: ActionType!) {
    ///   recordAccess(accessType: $accessType, actionType: $actionType)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class RecordAccessMutation : global::GraphQLClient.IRecordAccessMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IRecordAccessResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _accessTypeFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _actionTypeFormatter;
        public RecordAccessMutation(global::StrawberryShake.IOperationExecutor<IRecordAccessResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _accessTypeFormatter = serializerResolver.GetInputValueFormatter("AccessType");
            _actionTypeFormatter = serializerResolver.GetInputValueFormatter("ActionType");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IRecordAccessResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IRecordAccessResult>> ExecuteAsync(global::GraphQLClient.AccessType accessType, global::GraphQLClient.ActionType actionType, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(accessType, actionType);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IRecordAccessResult>> Watch(global::GraphQLClient.AccessType accessType, global::GraphQLClient.ActionType actionType, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(accessType, actionType);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::GraphQLClient.AccessType accessType, global::GraphQLClient.ActionType actionType)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("accessType", FormatAccessType(accessType));
            variables.Add("actionType", FormatActionType(actionType));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: RecordAccessMutationDocument.Instance.Hash.Value, name: "RecordAccess", document: RecordAccessMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatAccessType(global::GraphQLClient.AccessType value)
        {
            return _accessTypeFormatter.Format(value);
        }

        private global::System.Object? FormatActionType(global::GraphQLClient.ActionType value)
        {
            return _actionTypeFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the RecordAccess GraphQL operation
    /// <code>
    /// mutation RecordAccess($accessType: AccessType!, $actionType: ActionType!) {
    ///   recordAccess(accessType: $accessType, actionType: $actionType)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IRecordAccessMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IRecordAccessResult>> ExecuteAsync(global::GraphQLClient.AccessType accessType, global::GraphQLClient.ActionType actionType, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IRecordAccessResult>> Watch(global::GraphQLClient.AccessType accessType, global::GraphQLClient.ActionType actionType, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the RecordRecipeUse GraphQL operation
    /// <code>
    /// mutation RecordRecipeUse($recipeId: Long!, $fingerprint: String) {
    ///   recordAccess(accessType: IntelliJ, actionType: AssistantRecipeUse, recipeId: $recipeId, userFingerprint: $fingerprint)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class RecordRecipeUseMutationDocument : global::StrawberryShake.IDocument
    {
        private RecordRecipeUseMutationDocument()
        {
        }

        public static RecordRecipeUseMutationDocument Instance { get; } = new RecordRecipeUseMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x55, 0x73, 0x65, 0x28, 0x24, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x3a, 0x20, 0x4c, 0x6f, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x28, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x4a, 0x2c, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x55, 0x73, 0x65, 0x2c, 0x20, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x2c, 0x20, 0x75, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x29, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "73647874bc3aba4223de318ae7607041");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the RecordRecipeUse GraphQL operation
    /// <code>
    /// mutation RecordRecipeUse($recipeId: Long!, $fingerprint: String) {
    ///   recordAccess(accessType: IntelliJ, actionType: AssistantRecipeUse, recipeId: $recipeId, userFingerprint: $fingerprint)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class RecordRecipeUseMutation : global::GraphQLClient.IRecordRecipeUseMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IRecordRecipeUseResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _longFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public RecordRecipeUseMutation(global::StrawberryShake.IOperationExecutor<IRecordRecipeUseResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _longFormatter = serializerResolver.GetInputValueFormatter("Long");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IRecordRecipeUseResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IRecordRecipeUseResult>> ExecuteAsync(global::System.Int64 recipeId, global::System.String? fingerprint, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(recipeId, fingerprint);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IRecordRecipeUseResult>> Watch(global::System.Int64 recipeId, global::System.String? fingerprint, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(recipeId, fingerprint);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int64 recipeId, global::System.String? fingerprint)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("recipeId", FormatRecipeId(recipeId));
            variables.Add("fingerprint", FormatFingerprint(fingerprint));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: RecordRecipeUseMutationDocument.Instance.Hash.Value, name: "RecordRecipeUse", document: RecordRecipeUseMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatRecipeId(global::System.Int64 value)
        {
            return _longFormatter.Format(value);
        }

        private global::System.Object? FormatFingerprint(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the RecordRecipeUse GraphQL operation
    /// <code>
    /// mutation RecordRecipeUse($recipeId: Long!, $fingerprint: String) {
    ///   recordAccess(accessType: IntelliJ, actionType: AssistantRecipeUse, recipeId: $recipeId, userFingerprint: $fingerprint)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IRecordRecipeUseMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IRecordRecipeUseResult>> ExecuteAsync(global::System.Int64 recipeId, global::System.String? fingerprint, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IRecordRecipeUseResult>> Watch(global::System.Int64 recipeId, global::System.String? fingerprint, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the RemoveViolationToIgnore GraphQL operation
    /// <code>
    /// mutation RemoveViolationToIgnore($projectId: Long!, $rule: String!, $tool: String!, $language: LanguageEnumeration!, $filename: String) {
    ///   removeViolationToIgnore(projectId: $projectId, rule: $rule, tool: $tool, language: $language, filename: $filename)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class RemoveViolationToIgnoreMutationDocument : global::StrawberryShake.IDocument
    {
        private RemoveViolationToIgnoreMutationDocument()
        {
        }

        public static RemoveViolationToIgnoreMutationDocument Instance { get; } = new RemoveViolationToIgnoreMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x28, 0x24, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x4c, 0x6f, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x72, 0x75, 0x6c, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x74, 0x6f, 0x6f, 0x6c, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a, 0x20, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x21, 0x2c, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x28, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x2c, 0x20, 0x72, 0x75, 0x6c, 0x65, 0x3a, 0x20, 0x24, 0x72, 0x75, 0x6c, 0x65, 0x2c, 0x20, 0x74, 0x6f, 0x6f, 0x6c, 0x3a, 0x20, 0x24, 0x74, 0x6f, 0x6f, 0x6c, 0x2c, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a, 0x20, 0x24, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2c, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "29a01a16616130e6394eebbb6d661523");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the RemoveViolationToIgnore GraphQL operation
    /// <code>
    /// mutation RemoveViolationToIgnore($projectId: Long!, $rule: String!, $tool: String!, $language: LanguageEnumeration!, $filename: String) {
    ///   removeViolationToIgnore(projectId: $projectId, rule: $rule, tool: $tool, language: $language, filename: $filename)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class RemoveViolationToIgnoreMutation : global::GraphQLClient.IRemoveViolationToIgnoreMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IRemoveViolationToIgnoreResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _longFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _languageEnumerationFormatter;
        public RemoveViolationToIgnoreMutation(global::StrawberryShake.IOperationExecutor<IRemoveViolationToIgnoreResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _longFormatter = serializerResolver.GetInputValueFormatter("Long");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _languageEnumerationFormatter = serializerResolver.GetInputValueFormatter("LanguageEnumeration");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IRemoveViolationToIgnoreResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IRemoveViolationToIgnoreResult>> ExecuteAsync(global::System.Int64 projectId, global::System.String rule, global::System.String tool, global::GraphQLClient.LanguageEnumeration language, global::System.String? filename, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(projectId, rule, tool, language, filename);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IRemoveViolationToIgnoreResult>> Watch(global::System.Int64 projectId, global::System.String rule, global::System.String tool, global::GraphQLClient.LanguageEnumeration language, global::System.String? filename, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(projectId, rule, tool, language, filename);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int64 projectId, global::System.String rule, global::System.String tool, global::GraphQLClient.LanguageEnumeration language, global::System.String? filename)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("projectId", FormatProjectId(projectId));
            variables.Add("rule", FormatRule(rule));
            variables.Add("tool", FormatTool(tool));
            variables.Add("language", FormatLanguage(language));
            variables.Add("filename", FormatFilename(filename));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: RemoveViolationToIgnoreMutationDocument.Instance.Hash.Value, name: "RemoveViolationToIgnore", document: RemoveViolationToIgnoreMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatProjectId(global::System.Int64 value)
        {
            return _longFormatter.Format(value);
        }

        private global::System.Object? FormatRule(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatTool(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatLanguage(global::GraphQLClient.LanguageEnumeration value)
        {
            return _languageEnumerationFormatter.Format(value);
        }

        private global::System.Object? FormatFilename(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the RemoveViolationToIgnore GraphQL operation
    /// <code>
    /// mutation RemoveViolationToIgnore($projectId: Long!, $rule: String!, $tool: String!, $language: LanguageEnumeration!, $filename: String) {
    ///   removeViolationToIgnore(projectId: $projectId, rule: $rule, tool: $tool, language: $language, filename: $filename)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface IRemoveViolationToIgnoreMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IRemoveViolationToIgnoreResult>> ExecuteAsync(global::System.Int64 projectId, global::System.String rule, global::System.String tool, global::GraphQLClient.LanguageEnumeration language, global::System.String? filename, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IRemoveViolationToIgnoreResult>> Watch(global::System.Int64 projectId, global::System.String rule, global::System.String tool, global::GraphQLClient.LanguageEnumeration language, global::System.String? filename, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the CodigaGraphQLClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class CodigaGraphQLClient : global::GraphQLClient.ICodigaGraphQLClient
    {
        private readonly global::GraphQLClient.IGetFileDataQuery _getFileData;
        private readonly global::GraphQLClient.IGetProjectsQuery _getProjects;
        private readonly global::GraphQLClient.IGetRecipesForClientQuery _getRecipesForClient;
        private readonly global::GraphQLClient.IGetRecipesForClientByShortcutQuery _getRecipesForClientByShortcut;
        private readonly global::GraphQLClient.IGetRecipesForClientByShortcutLastTimestampQuery _getRecipesForClientByShortcutLastTimestamp;
        private readonly global::GraphQLClient.IGetRecipesForClientSemanticQuery _getRecipesForClientSemantic;
        private readonly global::GraphQLClient.IGetUserQuery _getUser;
        private readonly global::GraphQLClient.IAddViolationToIgnoreMutation _addViolationToIgnore;
        private readonly global::GraphQLClient.IRecordAccessMutation _recordAccess;
        private readonly global::GraphQLClient.IRecordRecipeUseMutation _recordRecipeUse;
        private readonly global::GraphQLClient.IRemoveViolationToIgnoreMutation _removeViolationToIgnore;
        public CodigaGraphQLClient(global::GraphQLClient.IGetFileDataQuery getFileData, global::GraphQLClient.IGetProjectsQuery getProjects, global::GraphQLClient.IGetRecipesForClientQuery getRecipesForClient, global::GraphQLClient.IGetRecipesForClientByShortcutQuery getRecipesForClientByShortcut, global::GraphQLClient.IGetRecipesForClientByShortcutLastTimestampQuery getRecipesForClientByShortcutLastTimestamp, global::GraphQLClient.IGetRecipesForClientSemanticQuery getRecipesForClientSemantic, global::GraphQLClient.IGetUserQuery getUser, global::GraphQLClient.IAddViolationToIgnoreMutation addViolationToIgnore, global::GraphQLClient.IRecordAccessMutation recordAccess, global::GraphQLClient.IRecordRecipeUseMutation recordRecipeUse, global::GraphQLClient.IRemoveViolationToIgnoreMutation removeViolationToIgnore)
        {
            _getFileData = getFileData ?? throw new global::System.ArgumentNullException(nameof(getFileData));
            _getProjects = getProjects ?? throw new global::System.ArgumentNullException(nameof(getProjects));
            _getRecipesForClient = getRecipesForClient ?? throw new global::System.ArgumentNullException(nameof(getRecipesForClient));
            _getRecipesForClientByShortcut = getRecipesForClientByShortcut ?? throw new global::System.ArgumentNullException(nameof(getRecipesForClientByShortcut));
            _getRecipesForClientByShortcutLastTimestamp = getRecipesForClientByShortcutLastTimestamp ?? throw new global::System.ArgumentNullException(nameof(getRecipesForClientByShortcutLastTimestamp));
            _getRecipesForClientSemantic = getRecipesForClientSemantic ?? throw new global::System.ArgumentNullException(nameof(getRecipesForClientSemantic));
            _getUser = getUser ?? throw new global::System.ArgumentNullException(nameof(getUser));
            _addViolationToIgnore = addViolationToIgnore ?? throw new global::System.ArgumentNullException(nameof(addViolationToIgnore));
            _recordAccess = recordAccess ?? throw new global::System.ArgumentNullException(nameof(recordAccess));
            _recordRecipeUse = recordRecipeUse ?? throw new global::System.ArgumentNullException(nameof(recordRecipeUse));
            _removeViolationToIgnore = removeViolationToIgnore ?? throw new global::System.ArgumentNullException(nameof(removeViolationToIgnore));
        }

        public static global::System.String ClientName => "CodigaGraphQLClient";
        public global::GraphQLClient.IGetFileDataQuery GetFileData => _getFileData;
        public global::GraphQLClient.IGetProjectsQuery GetProjects => _getProjects;
        public global::GraphQLClient.IGetRecipesForClientQuery GetRecipesForClient => _getRecipesForClient;
        public global::GraphQLClient.IGetRecipesForClientByShortcutQuery GetRecipesForClientByShortcut => _getRecipesForClientByShortcut;
        public global::GraphQLClient.IGetRecipesForClientByShortcutLastTimestampQuery GetRecipesForClientByShortcutLastTimestamp => _getRecipesForClientByShortcutLastTimestamp;
        public global::GraphQLClient.IGetRecipesForClientSemanticQuery GetRecipesForClientSemantic => _getRecipesForClientSemantic;
        public global::GraphQLClient.IGetUserQuery GetUser => _getUser;
        public global::GraphQLClient.IAddViolationToIgnoreMutation AddViolationToIgnore => _addViolationToIgnore;
        public global::GraphQLClient.IRecordAccessMutation RecordAccess => _recordAccess;
        public global::GraphQLClient.IRecordRecipeUseMutation RecordRecipeUse => _recordRecipeUse;
        public global::GraphQLClient.IRemoveViolationToIgnoreMutation RemoveViolationToIgnore => _removeViolationToIgnore;
    }

    /// <summary>
    /// Represents the CodigaGraphQLClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial interface ICodigaGraphQLClient
    {
        global::GraphQLClient.IGetFileDataQuery GetFileData { get; }

        global::GraphQLClient.IGetProjectsQuery GetProjects { get; }

        global::GraphQLClient.IGetRecipesForClientQuery GetRecipesForClient { get; }

        global::GraphQLClient.IGetRecipesForClientByShortcutQuery GetRecipesForClientByShortcut { get; }

        global::GraphQLClient.IGetRecipesForClientByShortcutLastTimestampQuery GetRecipesForClientByShortcutLastTimestamp { get; }

        global::GraphQLClient.IGetRecipesForClientSemanticQuery GetRecipesForClientSemantic { get; }

        global::GraphQLClient.IGetUserQuery GetUser { get; }

        global::GraphQLClient.IAddViolationToIgnoreMutation AddViolationToIgnore { get; }

        global::GraphQLClient.IRecordAccessMutation RecordAccess { get; }

        global::GraphQLClient.IRecordRecipeUseMutation RecordRecipeUse { get; }

        global::GraphQLClient.IRemoveViolationToIgnoreMutation RemoveViolationToIgnore { get; }
    }
}

namespace GraphQLClient.State
{
    ///<summary>A project</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class ProjectEntity
    {
        public ProjectEntity(global::System.Int64 id = default !, global::System.String name = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> analyses = default !, global::StrawberryShake.EntityId? owner = default !, global::StrawberryShake.EntityId? @group = default !, global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.State.ViolationIgnoreData> violationsToIgnore = default !)
        {
            Id = id;
            Name = name;
            Analyses = analyses;
            Owner = owner;
            Group = @group;
            ViolationsToIgnore = violationsToIgnore;
        }

        ///<summary>identifier of the project</summary>
        public global::System.Int64 Id { get; }

        ///<summary>name of the project</summary>
        public global::System.String Name { get; }

        ///<summary>list of all analyses</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Analyses { get; }

        ///<summary>owner of the project</summary>
        public global::StrawberryShake.EntityId? Owner { get; }

        ///<summary>Group of the project (if project is associated with a group)</summary>
        public global::StrawberryShake.EntityId? Group { get; }

        ///<summary>List of violations to ignore</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.State.ViolationIgnoreData> ViolationsToIgnore { get; }
    }

    ///<summary>An analysis object</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class AnalysisEntity
    {
        public AnalysisEntity(global::System.Int64 id = default !, global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.State.ViolationData> violations = default !, global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.State.ComplexFunctionData> longFunctions = default !, global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.State.ComplexFunctionData> complexFunctions = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> duplicates = default !)
        {
            Id = id;
            Violations = violations;
            LongFunctions = longFunctions;
            ComplexFunctions = complexFunctions;
            Duplicates = duplicates;
        }

        ///<summary>identifier of the analysis</summary>
        public global::System.Int64 Id { get; }

        ///<summary>violations for this analysis</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.State.ViolationData> Violations { get; }

        ///<summary>complex functions</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.State.ComplexFunctionData> LongFunctions { get; }

        ///<summary>complex functions</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.State.ComplexFunctionData> ComplexFunctions { get; }

        ///<summary>duplicates for this analysis</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Duplicates { get; }
    }

    ///<summary>Information about duplicate (does not contain occurrences)</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class DuplicateEntity
    {
        public DuplicateEntity(global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.State.DuplicateOccurrenceData> occurrences = default !)
        {
            Occurrences = occurrences;
        }

        ///<summary>list of occurrences</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.State.DuplicateOccurrenceData> Occurrences { get; }
    }

    ///<summary>A user</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class UserEntity
    {
        public UserEntity(global::System.String username = default !)
        {
            Username = username;
        }

        ///<summary>name of the user</summary>
        public global::System.String Username { get; }
    }

    ///<summary>A group</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GroupEntity
    {
        public GroupEntity(global::System.Int64 id = default !, global::System.String name = default !)
        {
            Id = id;
            Name = name;
        }

        ///<summary>identifier of the project</summary>
        public global::System.Int64 Id { get; }

        ///<summary>name of the group</summary>
        public global::System.String Name { get; }
    }

    ///<summary>Recipe to get code</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class AssistantRecipeEntity
    {
        public AssistantRecipeEntity(global::System.Int64 id = default !, global::System.String name = default !, global::System.String code = default !, global::System.String jetbrainsFormat = default !, global::System.Collections.Generic.IReadOnlyList<global::System.String> keywords = default !, global::System.Collections.Generic.IReadOnlyList<global::System.String> imports = default !, global::GraphQLClient.LanguageEnumeration language = default !, global::System.String description = default !, global::System.String? shortcut = default !, global::System.String presentableFormat = default !, global::System.Boolean isPublic = default !, global::StrawberryShake.EntityId? owner = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> groups = default !)
        {
            Id = id;
            Name = name;
            Code = code;
            JetbrainsFormat = jetbrainsFormat;
            Keywords = keywords;
            Imports = imports;
            Language = language;
            Description = description;
            Shortcut = shortcut;
            PresentableFormat = presentableFormat;
            IsPublic = isPublic;
            Owner = owner;
            Groups = groups;
        }

        ///<summary>identifier</summary>
        public global::System.Int64 Id { get; }

        ///<summary>name</summary>
        public global::System.String Name { get; }

        ///<summary>content</summary>
        public global::System.String Code { get; }

        ///<summary>jetbrains format</summary>
        public global::System.String JetbrainsFormat { get; }

        ///<summary>keywords</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String> Keywords { get; }

        ///<summary>imports to add when adding the recipe</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String> Imports { get; }

        ///<summary>language of the recipe</summary>
        public global::GraphQLClient.LanguageEnumeration Language { get; }

        ///<summary>description</summary>
        public global::System.String Description { get; }

        ///<summary>shortcut</summary>
        public global::System.String? Shortcut { get; }

        ///<summary>presentable format without user variable</summary>
        public global::System.String PresentableFormat { get; }

        ///<summary>is public</summary>
        public global::System.Boolean IsPublic { get; }

        ///<summary>recipe owner</summary>
        public global::StrawberryShake.EntityId? Owner { get; }

        ///<summary>groups the recipe is shared with</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Groups { get; }
    }

    ///<summary>A public user, contains only public information</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class PublicUserEntity
    {
        public PublicUserEntity(global::System.Int64 id = default !, global::System.String? displayName = default !, global::System.String? slug = default !, global::System.Boolean hasSlug = default !, global::GraphQLClient.AccountType accountType = default !)
        {
            Id = id;
            DisplayName = displayName;
            Slug = slug;
            HasSlug = hasSlug;
            AccountType = accountType;
        }

        ///<summary>id of the user</summary>
        public global::System.Int64 Id { get; }

        public global::System.String? DisplayName { get; }

        public global::System.String? Slug { get; }

        public global::System.Boolean HasSlug { get; }

        ///<summary>type of project (from third party or from the website</summary>
        public global::GraphQLClient.AccountType AccountType { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetFileDataResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.GetFileDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.ProjectEntity, GetFileData_Project_Project> _getFileData_Project_ProjectFromProjectEntityMapper;
        public GetFileDataResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.ProjectEntity, GetFileData_Project_Project> getFileData_Project_ProjectFromProjectEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getFileData_Project_ProjectFromProjectEntityMapper = getFileData_Project_ProjectFromProjectEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getFileData_Project_ProjectFromProjectEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQLClient.IGetFileDataResult);
        public GetFileDataResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetFileDataResultInfo info)
            {
                return new GetFileDataResult(MapIGetFileData_Project(info.Project, snapshot));
            }

            throw new global::System.ArgumentException("GetFileDataResultInfo expected.");
        }

        private global::GraphQLClient.IGetFileData_Project? MapIGetFileData_Project(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Project", global::System.StringComparison.Ordinal))
            {
                return _getFileData_Project_ProjectFromProjectEntityMapper.Map(snapshot.GetEntity<global::GraphQLClient.State.ProjectEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetFileDataResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetFileDataResultInfo(global::StrawberryShake.EntityId? project, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Project = project;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId? Project { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetFileDataResultInfo(Project, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetFileData_Project_ProjectFromProjectEntityMapper : global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.ProjectEntity, GetFileData_Project_Project>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.AnalysisEntity, GetFileData_Project_Analyses_Analysis> _getFileData_Project_Analyses_AnalysisFromAnalysisEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.DuplicateEntity, GetFileData_Project_Analyses_Duplicates_Duplicate> _getFileData_Project_Analyses_Duplicates_DuplicateFromDuplicateEntityMapper;
        public GetFileData_Project_ProjectFromProjectEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.AnalysisEntity, GetFileData_Project_Analyses_Analysis> getFileData_Project_Analyses_AnalysisFromAnalysisEntityMapper, global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.DuplicateEntity, GetFileData_Project_Analyses_Duplicates_Duplicate> getFileData_Project_Analyses_Duplicates_DuplicateFromDuplicateEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getFileData_Project_Analyses_AnalysisFromAnalysisEntityMapper = getFileData_Project_Analyses_AnalysisFromAnalysisEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getFileData_Project_Analyses_AnalysisFromAnalysisEntityMapper));
            _getFileData_Project_Analyses_Duplicates_DuplicateFromDuplicateEntityMapper = getFileData_Project_Analyses_Duplicates_DuplicateFromDuplicateEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getFileData_Project_Analyses_Duplicates_DuplicateFromDuplicateEntityMapper));
        }

        public GetFileData_Project_Project Map(global::GraphQLClient.State.ProjectEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetFileData_Project_Project(entity.Id, entity.Name, MapNonNullableIGetFileData_Project_AnalysesNonNullableArray(entity.Analyses, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetFileData_Project_Analyses> MapNonNullableIGetFileData_Project_AnalysesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var analysiss = new global::System.Collections.Generic.List<global::GraphQLClient.IGetFileData_Project_Analyses>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                analysiss.Add(MapNonNullableIGetFileData_Project_Analyses(child, snapshot));
            }

            return analysiss;
        }

        private global::GraphQLClient.IGetFileData_Project_Analyses MapNonNullableIGetFileData_Project_Analyses(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Analysis", global::System.StringComparison.Ordinal))
            {
                return _getFileData_Project_Analyses_AnalysisFromAnalysisEntityMapper.Map(snapshot.GetEntity<global::GraphQLClient.State.AnalysisEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetFileData_Project_Analyses_Violations> MapNonNullableIGetFileData_Project_Analyses_ViolationsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.State.ViolationData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var violations = new global::System.Collections.Generic.List<global::GraphQLClient.IGetFileData_Project_Analyses_Violations>();
            foreach (global::GraphQLClient.State.ViolationData child in list)
            {
                violations.Add(MapNonNullableIGetFileData_Project_Analyses_Violations(child, snapshot));
            }

            return violations;
        }

        private global::GraphQLClient.IGetFileData_Project_Analyses_Violations MapNonNullableIGetFileData_Project_Analyses_Violations(global::GraphQLClient.State.ViolationData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetFileData_Project_Analyses_Violations returnValue = default !;
            if (data.__typename.Equals("Violation", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetFileData_Project_Analyses_Violations_Violation(data.Line ?? throw new global::System.ArgumentNullException(), data.Category ?? throw new global::System.ArgumentNullException(), data.Severity ?? throw new global::System.ArgumentNullException(), data.Description ?? throw new global::System.ArgumentNullException(), data.Filename ?? throw new global::System.ArgumentNullException(), data.LineCount ?? throw new global::System.ArgumentNullException(), data.Language, data.Tool, data.Rule, data.RuleUrl);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetFileData_Project_Analyses_LongFunctions> MapNonNullableIGetFileData_Project_Analyses_LongFunctionsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.State.ComplexFunctionData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var complexFunctions = new global::System.Collections.Generic.List<global::GraphQLClient.IGetFileData_Project_Analyses_LongFunctions>();
            foreach (global::GraphQLClient.State.ComplexFunctionData child in list)
            {
                complexFunctions.Add(MapNonNullableIGetFileData_Project_Analyses_LongFunctions(child, snapshot));
            }

            return complexFunctions;
        }

        private global::GraphQLClient.IGetFileData_Project_Analyses_LongFunctions MapNonNullableIGetFileData_Project_Analyses_LongFunctions(global::GraphQLClient.State.ComplexFunctionData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetFileData_Project_Analyses_LongFunctions returnValue = default !;
            if (data.__typename.Equals("ComplexFunction", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetFileData_Project_Analyses_LongFunctions_ComplexFunction(data.Filename ?? throw new global::System.ArgumentNullException(), data.FunctionName ?? throw new global::System.ArgumentNullException(), data.Complexity ?? throw new global::System.ArgumentNullException(), data.Length ?? throw new global::System.ArgumentNullException(), data.LineStart ?? throw new global::System.ArgumentNullException(), data.LineEnd ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetFileData_Project_Analyses_ComplexFunctions> MapNonNullableIGetFileData_Project_Analyses_ComplexFunctionsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.State.ComplexFunctionData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var complexFunctions = new global::System.Collections.Generic.List<global::GraphQLClient.IGetFileData_Project_Analyses_ComplexFunctions>();
            foreach (global::GraphQLClient.State.ComplexFunctionData child in list)
            {
                complexFunctions.Add(MapNonNullableIGetFileData_Project_Analyses_ComplexFunctions(child, snapshot));
            }

            return complexFunctions;
        }

        private global::GraphQLClient.IGetFileData_Project_Analyses_ComplexFunctions MapNonNullableIGetFileData_Project_Analyses_ComplexFunctions(global::GraphQLClient.State.ComplexFunctionData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetFileData_Project_Analyses_ComplexFunctions returnValue = default !;
            if (data.__typename.Equals("ComplexFunction", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetFileData_Project_Analyses_ComplexFunctions_ComplexFunction(data.Filename ?? throw new global::System.ArgumentNullException(), data.FunctionName ?? throw new global::System.ArgumentNullException(), data.Complexity ?? throw new global::System.ArgumentNullException(), data.Length ?? throw new global::System.ArgumentNullException(), data.LineStart ?? throw new global::System.ArgumentNullException(), data.LineEnd ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetFileData_Project_Analyses_Duplicates> MapNonNullableIGetFileData_Project_Analyses_DuplicatesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var duplicates = new global::System.Collections.Generic.List<global::GraphQLClient.IGetFileData_Project_Analyses_Duplicates>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                duplicates.Add(MapNonNullableIGetFileData_Project_Analyses_Duplicates(child, snapshot));
            }

            return duplicates;
        }

        private global::GraphQLClient.IGetFileData_Project_Analyses_Duplicates MapNonNullableIGetFileData_Project_Analyses_Duplicates(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Duplicate", global::System.StringComparison.Ordinal))
            {
                return _getFileData_Project_Analyses_Duplicates_DuplicateFromDuplicateEntityMapper.Map(snapshot.GetEntity<global::GraphQLClient.State.DuplicateEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetFileData_Project_Analyses_Duplicates_Occurrences> MapNonNullableIGetFileData_Project_Analyses_Duplicates_OccurrencesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.State.DuplicateOccurrenceData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var duplicateOccurrences = new global::System.Collections.Generic.List<global::GraphQLClient.IGetFileData_Project_Analyses_Duplicates_Occurrences>();
            foreach (global::GraphQLClient.State.DuplicateOccurrenceData child in list)
            {
                duplicateOccurrences.Add(MapNonNullableIGetFileData_Project_Analyses_Duplicates_Occurrences(child, snapshot));
            }

            return duplicateOccurrences;
        }

        private global::GraphQLClient.IGetFileData_Project_Analyses_Duplicates_Occurrences MapNonNullableIGetFileData_Project_Analyses_Duplicates_Occurrences(global::GraphQLClient.State.DuplicateOccurrenceData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetFileData_Project_Analyses_Duplicates_Occurrences returnValue = default !;
            if (data.__typename.Equals("DuplicateOccurrence", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetFileData_Project_Analyses_Duplicates_Occurrences_DuplicateOccurrence(data.Line ?? throw new global::System.ArgumentNullException(), data.Filename ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetFileData_Project_Analyses_AnalysisFromAnalysisEntityMapper : global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.AnalysisEntity, GetFileData_Project_Analyses_Analysis>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.DuplicateEntity, GetFileData_Project_Analyses_Duplicates_Duplicate> _getFileData_Project_Analyses_Duplicates_DuplicateFromDuplicateEntityMapper;
        public GetFileData_Project_Analyses_AnalysisFromAnalysisEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.DuplicateEntity, GetFileData_Project_Analyses_Duplicates_Duplicate> getFileData_Project_Analyses_Duplicates_DuplicateFromDuplicateEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getFileData_Project_Analyses_Duplicates_DuplicateFromDuplicateEntityMapper = getFileData_Project_Analyses_Duplicates_DuplicateFromDuplicateEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getFileData_Project_Analyses_Duplicates_DuplicateFromDuplicateEntityMapper));
        }

        public GetFileData_Project_Analyses_Analysis Map(global::GraphQLClient.State.AnalysisEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetFileData_Project_Analyses_Analysis(entity.Id, MapNonNullableIGetFileData_Project_Analyses_ViolationsNonNullableArray(entity.Violations, snapshot), MapNonNullableIGetFileData_Project_Analyses_LongFunctionsNonNullableArray(entity.LongFunctions, snapshot), MapNonNullableIGetFileData_Project_Analyses_ComplexFunctionsNonNullableArray(entity.ComplexFunctions, snapshot), MapNonNullableIGetFileData_Project_Analyses_DuplicatesNonNullableArray(entity.Duplicates, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetFileData_Project_Analyses_Violations> MapNonNullableIGetFileData_Project_Analyses_ViolationsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.State.ViolationData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var violations = new global::System.Collections.Generic.List<global::GraphQLClient.IGetFileData_Project_Analyses_Violations>();
            foreach (global::GraphQLClient.State.ViolationData child in list)
            {
                violations.Add(MapNonNullableIGetFileData_Project_Analyses_Violations(child, snapshot));
            }

            return violations;
        }

        private global::GraphQLClient.IGetFileData_Project_Analyses_Violations MapNonNullableIGetFileData_Project_Analyses_Violations(global::GraphQLClient.State.ViolationData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetFileData_Project_Analyses_Violations returnValue = default !;
            if (data.__typename.Equals("Violation", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetFileData_Project_Analyses_Violations_Violation(data.Line ?? throw new global::System.ArgumentNullException(), data.Category ?? throw new global::System.ArgumentNullException(), data.Severity ?? throw new global::System.ArgumentNullException(), data.Description ?? throw new global::System.ArgumentNullException(), data.Filename ?? throw new global::System.ArgumentNullException(), data.LineCount ?? throw new global::System.ArgumentNullException(), data.Language, data.Tool, data.Rule, data.RuleUrl);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetFileData_Project_Analyses_LongFunctions> MapNonNullableIGetFileData_Project_Analyses_LongFunctionsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.State.ComplexFunctionData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var complexFunctions = new global::System.Collections.Generic.List<global::GraphQLClient.IGetFileData_Project_Analyses_LongFunctions>();
            foreach (global::GraphQLClient.State.ComplexFunctionData child in list)
            {
                complexFunctions.Add(MapNonNullableIGetFileData_Project_Analyses_LongFunctions(child, snapshot));
            }

            return complexFunctions;
        }

        private global::GraphQLClient.IGetFileData_Project_Analyses_LongFunctions MapNonNullableIGetFileData_Project_Analyses_LongFunctions(global::GraphQLClient.State.ComplexFunctionData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetFileData_Project_Analyses_LongFunctions returnValue = default !;
            if (data.__typename.Equals("ComplexFunction", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetFileData_Project_Analyses_LongFunctions_ComplexFunction(data.Filename ?? throw new global::System.ArgumentNullException(), data.FunctionName ?? throw new global::System.ArgumentNullException(), data.Complexity ?? throw new global::System.ArgumentNullException(), data.Length ?? throw new global::System.ArgumentNullException(), data.LineStart ?? throw new global::System.ArgumentNullException(), data.LineEnd ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetFileData_Project_Analyses_ComplexFunctions> MapNonNullableIGetFileData_Project_Analyses_ComplexFunctionsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.State.ComplexFunctionData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var complexFunctions = new global::System.Collections.Generic.List<global::GraphQLClient.IGetFileData_Project_Analyses_ComplexFunctions>();
            foreach (global::GraphQLClient.State.ComplexFunctionData child in list)
            {
                complexFunctions.Add(MapNonNullableIGetFileData_Project_Analyses_ComplexFunctions(child, snapshot));
            }

            return complexFunctions;
        }

        private global::GraphQLClient.IGetFileData_Project_Analyses_ComplexFunctions MapNonNullableIGetFileData_Project_Analyses_ComplexFunctions(global::GraphQLClient.State.ComplexFunctionData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetFileData_Project_Analyses_ComplexFunctions returnValue = default !;
            if (data.__typename.Equals("ComplexFunction", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetFileData_Project_Analyses_ComplexFunctions_ComplexFunction(data.Filename ?? throw new global::System.ArgumentNullException(), data.FunctionName ?? throw new global::System.ArgumentNullException(), data.Complexity ?? throw new global::System.ArgumentNullException(), data.Length ?? throw new global::System.ArgumentNullException(), data.LineStart ?? throw new global::System.ArgumentNullException(), data.LineEnd ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetFileData_Project_Analyses_Duplicates> MapNonNullableIGetFileData_Project_Analyses_DuplicatesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var duplicates = new global::System.Collections.Generic.List<global::GraphQLClient.IGetFileData_Project_Analyses_Duplicates>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                duplicates.Add(MapNonNullableIGetFileData_Project_Analyses_Duplicates(child, snapshot));
            }

            return duplicates;
        }

        private global::GraphQLClient.IGetFileData_Project_Analyses_Duplicates MapNonNullableIGetFileData_Project_Analyses_Duplicates(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Duplicate", global::System.StringComparison.Ordinal))
            {
                return _getFileData_Project_Analyses_Duplicates_DuplicateFromDuplicateEntityMapper.Map(snapshot.GetEntity<global::GraphQLClient.State.DuplicateEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetFileData_Project_Analyses_Duplicates_Occurrences> MapNonNullableIGetFileData_Project_Analyses_Duplicates_OccurrencesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.State.DuplicateOccurrenceData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var duplicateOccurrences = new global::System.Collections.Generic.List<global::GraphQLClient.IGetFileData_Project_Analyses_Duplicates_Occurrences>();
            foreach (global::GraphQLClient.State.DuplicateOccurrenceData child in list)
            {
                duplicateOccurrences.Add(MapNonNullableIGetFileData_Project_Analyses_Duplicates_Occurrences(child, snapshot));
            }

            return duplicateOccurrences;
        }

        private global::GraphQLClient.IGetFileData_Project_Analyses_Duplicates_Occurrences MapNonNullableIGetFileData_Project_Analyses_Duplicates_Occurrences(global::GraphQLClient.State.DuplicateOccurrenceData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetFileData_Project_Analyses_Duplicates_Occurrences returnValue = default !;
            if (data.__typename.Equals("DuplicateOccurrence", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetFileData_Project_Analyses_Duplicates_Occurrences_DuplicateOccurrence(data.Line ?? throw new global::System.ArgumentNullException(), data.Filename ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetFileData_Project_Analyses_Duplicates_DuplicateFromDuplicateEntityMapper : global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.DuplicateEntity, GetFileData_Project_Analyses_Duplicates_Duplicate>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetFileData_Project_Analyses_Duplicates_DuplicateFromDuplicateEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetFileData_Project_Analyses_Duplicates_Duplicate Map(global::GraphQLClient.State.DuplicateEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetFileData_Project_Analyses_Duplicates_Duplicate(MapNonNullableIGetFileData_Project_Analyses_Duplicates_OccurrencesNonNullableArray(entity.Occurrences, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetFileData_Project_Analyses_Duplicates_Occurrences> MapNonNullableIGetFileData_Project_Analyses_Duplicates_OccurrencesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.State.DuplicateOccurrenceData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var duplicateOccurrences = new global::System.Collections.Generic.List<global::GraphQLClient.IGetFileData_Project_Analyses_Duplicates_Occurrences>();
            foreach (global::GraphQLClient.State.DuplicateOccurrenceData child in list)
            {
                duplicateOccurrences.Add(MapNonNullableIGetFileData_Project_Analyses_Duplicates_Occurrences(child, snapshot));
            }

            return duplicateOccurrences;
        }

        private global::GraphQLClient.IGetFileData_Project_Analyses_Duplicates_Occurrences MapNonNullableIGetFileData_Project_Analyses_Duplicates_Occurrences(global::GraphQLClient.State.DuplicateOccurrenceData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetFileData_Project_Analyses_Duplicates_Occurrences returnValue = default !;
            if (data.__typename.Equals("DuplicateOccurrence", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetFileData_Project_Analyses_Duplicates_Occurrences_DuplicateOccurrence(data.Line ?? throw new global::System.ArgumentNullException(), data.Filename ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetProjectsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.GetProjectsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.ProjectEntity, GetProjects_Projects_Project> _getProjects_Projects_ProjectFromProjectEntityMapper;
        public GetProjectsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.ProjectEntity, GetProjects_Projects_Project> getProjects_Projects_ProjectFromProjectEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getProjects_Projects_ProjectFromProjectEntityMapper = getProjects_Projects_ProjectFromProjectEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getProjects_Projects_ProjectFromProjectEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQLClient.IGetProjectsResult);
        public GetProjectsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetProjectsResultInfo info)
            {
                return new GetProjectsResult(MapNonNullableIGetProjects_ProjectsNonNullableArray(info.Projects, snapshot));
            }

            throw new global::System.ArgumentException("GetProjectsResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetProjects_Projects> MapNonNullableIGetProjects_ProjectsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var projects = new global::System.Collections.Generic.List<global::GraphQLClient.IGetProjects_Projects>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                projects.Add(MapNonNullableIGetProjects_Projects(child, snapshot));
            }

            return projects;
        }

        private global::GraphQLClient.IGetProjects_Projects MapNonNullableIGetProjects_Projects(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Project", global::System.StringComparison.Ordinal))
            {
                return _getProjects_Projects_ProjectFromProjectEntityMapper.Map(snapshot.GetEntity<global::GraphQLClient.State.ProjectEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetProjectsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetProjectsResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> projects, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Projects = projects;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Projects { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetProjectsResultInfo(Projects, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetProjects_Projects_ProjectFromProjectEntityMapper : global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.ProjectEntity, GetProjects_Projects_Project>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.UserEntity, GetProjects_Projects_Owner_User> _getProjects_Projects_Owner_UserFromUserEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.GroupEntity, GetProjects_Projects_Group_Group> _getProjects_Projects_Group_GroupFromGroupEntityMapper;
        public GetProjects_Projects_ProjectFromProjectEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.UserEntity, GetProjects_Projects_Owner_User> getProjects_Projects_Owner_UserFromUserEntityMapper, global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.GroupEntity, GetProjects_Projects_Group_Group> getProjects_Projects_Group_GroupFromGroupEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getProjects_Projects_Owner_UserFromUserEntityMapper = getProjects_Projects_Owner_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getProjects_Projects_Owner_UserFromUserEntityMapper));
            _getProjects_Projects_Group_GroupFromGroupEntityMapper = getProjects_Projects_Group_GroupFromGroupEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getProjects_Projects_Group_GroupFromGroupEntityMapper));
        }

        public GetProjects_Projects_Project Map(global::GraphQLClient.State.ProjectEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetProjects_Projects_Project(entity.Id, entity.Name, MapIGetProjects_Projects_Owner(entity.Owner, snapshot), MapIGetProjects_Projects_Group(entity.Group, snapshot), MapNonNullableIGetProjects_Projects_ViolationsToIgnoreNonNullableArray(entity.ViolationsToIgnore, snapshot));
        }

        private global::GraphQLClient.IGetProjects_Projects_Owner? MapIGetProjects_Projects_Owner(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                return _getProjects_Projects_Owner_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::GraphQLClient.State.UserEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::GraphQLClient.IGetProjects_Projects_Group? MapIGetProjects_Projects_Group(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Group", global::System.StringComparison.Ordinal))
            {
                return _getProjects_Projects_Group_GroupFromGroupEntityMapper.Map(snapshot.GetEntity<global::GraphQLClient.State.GroupEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetProjects_Projects_ViolationsToIgnore> MapNonNullableIGetProjects_Projects_ViolationsToIgnoreNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.State.ViolationIgnoreData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var violationIgnores = new global::System.Collections.Generic.List<global::GraphQLClient.IGetProjects_Projects_ViolationsToIgnore>();
            foreach (global::GraphQLClient.State.ViolationIgnoreData child in list)
            {
                violationIgnores.Add(MapNonNullableIGetProjects_Projects_ViolationsToIgnore(child, snapshot));
            }

            return violationIgnores;
        }

        private global::GraphQLClient.IGetProjects_Projects_ViolationsToIgnore MapNonNullableIGetProjects_Projects_ViolationsToIgnore(global::GraphQLClient.State.ViolationIgnoreData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetProjects_Projects_ViolationsToIgnore returnValue = default !;
            if (data.__typename.Equals("ViolationIgnore", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetProjects_Projects_ViolationsToIgnore_ViolationIgnore(data.Filename, data.Description, data.Prefix, data.Rule ?? throw new global::System.ArgumentNullException(), data.Tool ?? throw new global::System.ArgumentNullException(), data.Language);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetProjects_Projects_Owner_UserFromUserEntityMapper : global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.UserEntity, GetProjects_Projects_Owner_User>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetProjects_Projects_Owner_UserFromUserEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetProjects_Projects_Owner_User Map(global::GraphQLClient.State.UserEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetProjects_Projects_Owner_User(entity.Username);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetProjects_Projects_Group_GroupFromGroupEntityMapper : global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.GroupEntity, GetProjects_Projects_Group_Group>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetProjects_Projects_Group_GroupFromGroupEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetProjects_Projects_Group_Group Map(global::GraphQLClient.State.GroupEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetProjects_Projects_Group_Group(entity.Id, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.GetRecipesForClientResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.AssistantRecipeEntity, GetRecipesForClient_GetRecipesForClient_AssistantRecipe> _getRecipesForClient_GetRecipesForClient_AssistantRecipeFromAssistantRecipeEntityMapper;
        public GetRecipesForClientResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.AssistantRecipeEntity, GetRecipesForClient_GetRecipesForClient_AssistantRecipe> getRecipesForClient_GetRecipesForClient_AssistantRecipeFromAssistantRecipeEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getRecipesForClient_GetRecipesForClient_AssistantRecipeFromAssistantRecipeEntityMapper = getRecipesForClient_GetRecipesForClient_AssistantRecipeFromAssistantRecipeEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getRecipesForClient_GetRecipesForClient_AssistantRecipeFromAssistantRecipeEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQLClient.IGetRecipesForClientResult);
        public GetRecipesForClientResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetRecipesForClientResultInfo info)
            {
                return new GetRecipesForClientResult(MapNonNullableIGetRecipesForClient_GetRecipesForClientNonNullableArray(info.GetRecipesForClient, snapshot));
            }

            throw new global::System.ArgumentException("GetRecipesForClientResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetRecipesForClient_GetRecipesForClient> MapNonNullableIGetRecipesForClient_GetRecipesForClientNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var assistantRecipes = new global::System.Collections.Generic.List<global::GraphQLClient.IGetRecipesForClient_GetRecipesForClient>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                assistantRecipes.Add(MapNonNullableIGetRecipesForClient_GetRecipesForClient(child, snapshot));
            }

            return assistantRecipes;
        }

        private global::GraphQLClient.IGetRecipesForClient_GetRecipesForClient MapNonNullableIGetRecipesForClient_GetRecipesForClient(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("AssistantRecipe", global::System.StringComparison.Ordinal))
            {
                return _getRecipesForClient_GetRecipesForClient_AssistantRecipeFromAssistantRecipeEntityMapper.Map(snapshot.GetEntity<global::GraphQLClient.State.AssistantRecipeEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetRecipesForClientResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> getRecipesForClient, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            GetRecipesForClient = getRecipesForClient;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> GetRecipesForClient { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetRecipesForClientResultInfo(GetRecipesForClient, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClient_GetRecipesForClient_AssistantRecipeFromAssistantRecipeEntityMapper : global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.AssistantRecipeEntity, GetRecipesForClient_GetRecipesForClient_AssistantRecipe>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetRecipesForClient_GetRecipesForClient_AssistantRecipeFromAssistantRecipeEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetRecipesForClient_GetRecipesForClient_AssistantRecipe Map(global::GraphQLClient.State.AssistantRecipeEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetRecipesForClient_GetRecipesForClient_AssistantRecipe(entity.Id, entity.Name, entity.Code, entity.JetbrainsFormat, entity.Keywords, entity.Imports, entity.Language, entity.Description, entity.Shortcut);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientByShortcutResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.GetRecipesForClientByShortcutResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.AssistantRecipeEntity, GetRecipesForClientByShortcut_GetRecipesForClientByShortcut_AssistantRecipe> _getRecipesForClientByShortcut_GetRecipesForClientByShortcut_AssistantRecipeFromAssistantRecipeEntityMapper;
        public GetRecipesForClientByShortcutResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.AssistantRecipeEntity, GetRecipesForClientByShortcut_GetRecipesForClientByShortcut_AssistantRecipe> getRecipesForClientByShortcut_GetRecipesForClientByShortcut_AssistantRecipeFromAssistantRecipeEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getRecipesForClientByShortcut_GetRecipesForClientByShortcut_AssistantRecipeFromAssistantRecipeEntityMapper = getRecipesForClientByShortcut_GetRecipesForClientByShortcut_AssistantRecipeFromAssistantRecipeEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getRecipesForClientByShortcut_GetRecipesForClientByShortcut_AssistantRecipeFromAssistantRecipeEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQLClient.IGetRecipesForClientByShortcutResult);
        public GetRecipesForClientByShortcutResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetRecipesForClientByShortcutResultInfo info)
            {
                return new GetRecipesForClientByShortcutResult(MapNonNullableIGetRecipesForClientByShortcut_GetRecipesForClientByShortcutNonNullableArray(info.GetRecipesForClientByShortcut, snapshot));
            }

            throw new global::System.ArgumentException("GetRecipesForClientByShortcutResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetRecipesForClientByShortcut_GetRecipesForClientByShortcut> MapNonNullableIGetRecipesForClientByShortcut_GetRecipesForClientByShortcutNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var assistantRecipes = new global::System.Collections.Generic.List<global::GraphQLClient.IGetRecipesForClientByShortcut_GetRecipesForClientByShortcut>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                assistantRecipes.Add(MapNonNullableIGetRecipesForClientByShortcut_GetRecipesForClientByShortcut(child, snapshot));
            }

            return assistantRecipes;
        }

        private global::GraphQLClient.IGetRecipesForClientByShortcut_GetRecipesForClientByShortcut MapNonNullableIGetRecipesForClientByShortcut_GetRecipesForClientByShortcut(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("AssistantRecipe", global::System.StringComparison.Ordinal))
            {
                return _getRecipesForClientByShortcut_GetRecipesForClientByShortcut_AssistantRecipeFromAssistantRecipeEntityMapper.Map(snapshot.GetEntity<global::GraphQLClient.State.AssistantRecipeEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientByShortcutResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetRecipesForClientByShortcutResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> getRecipesForClientByShortcut, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            GetRecipesForClientByShortcut = getRecipesForClientByShortcut;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> GetRecipesForClientByShortcut { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetRecipesForClientByShortcutResultInfo(GetRecipesForClientByShortcut, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientByShortcut_GetRecipesForClientByShortcut_AssistantRecipeFromAssistantRecipeEntityMapper : global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.AssistantRecipeEntity, GetRecipesForClientByShortcut_GetRecipesForClientByShortcut_AssistantRecipe>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetRecipesForClientByShortcut_GetRecipesForClientByShortcut_AssistantRecipeFromAssistantRecipeEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetRecipesForClientByShortcut_GetRecipesForClientByShortcut_AssistantRecipe Map(global::GraphQLClient.State.AssistantRecipeEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetRecipesForClientByShortcut_GetRecipesForClientByShortcut_AssistantRecipe(entity.Id, entity.Name, entity.Code, entity.Keywords, entity.Imports, entity.Language, entity.Description, entity.Shortcut);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientByShortcutLastTimestampResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.GetRecipesForClientByShortcutLastTimestampResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetRecipesForClientByShortcutLastTimestampResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQLClient.IGetRecipesForClientByShortcutLastTimestampResult);
        public GetRecipesForClientByShortcutLastTimestampResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetRecipesForClientByShortcutLastTimestampResultInfo info)
            {
                return new GetRecipesForClientByShortcutLastTimestampResult(info.GetRecipesForClientByShortcutLastTimestamp);
            }

            throw new global::System.ArgumentException("GetRecipesForClientByShortcutLastTimestampResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientByShortcutLastTimestampResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetRecipesForClientByShortcutLastTimestampResultInfo(global::System.Int64? getRecipesForClientByShortcutLastTimestamp, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            GetRecipesForClientByShortcutLastTimestamp = getRecipesForClientByShortcutLastTimestamp;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Int64? GetRecipesForClientByShortcutLastTimestamp { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetRecipesForClientByShortcutLastTimestampResultInfo(GetRecipesForClientByShortcutLastTimestamp, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientSemanticResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.GetRecipesForClientSemanticResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.AssistantRecipeEntity, GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_AssistantRecipe> _getRecipesForClientSemantic_AssistantRecipesSemanticSearch_AssistantRecipeFromAssistantRecipeEntityMapper;
        public GetRecipesForClientSemanticResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.AssistantRecipeEntity, GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_AssistantRecipe> getRecipesForClientSemantic_AssistantRecipesSemanticSearch_AssistantRecipeFromAssistantRecipeEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getRecipesForClientSemantic_AssistantRecipesSemanticSearch_AssistantRecipeFromAssistantRecipeEntityMapper = getRecipesForClientSemantic_AssistantRecipesSemanticSearch_AssistantRecipeFromAssistantRecipeEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getRecipesForClientSemantic_AssistantRecipesSemanticSearch_AssistantRecipeFromAssistantRecipeEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQLClient.IGetRecipesForClientSemanticResult);
        public GetRecipesForClientSemanticResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetRecipesForClientSemanticResultInfo info)
            {
                return new GetRecipesForClientSemanticResult(MapNonNullableIGetRecipesForClientSemantic_AssistantRecipesSemanticSearchNonNullableArray(info.AssistantRecipesSemanticSearch, snapshot));
            }

            throw new global::System.ArgumentException("GetRecipesForClientSemanticResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetRecipesForClientSemantic_AssistantRecipesSemanticSearch> MapNonNullableIGetRecipesForClientSemantic_AssistantRecipesSemanticSearchNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var assistantRecipes = new global::System.Collections.Generic.List<global::GraphQLClient.IGetRecipesForClientSemantic_AssistantRecipesSemanticSearch>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                assistantRecipes.Add(MapNonNullableIGetRecipesForClientSemantic_AssistantRecipesSemanticSearch(child, snapshot));
            }

            return assistantRecipes;
        }

        private global::GraphQLClient.IGetRecipesForClientSemantic_AssistantRecipesSemanticSearch MapNonNullableIGetRecipesForClientSemantic_AssistantRecipesSemanticSearch(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("AssistantRecipe", global::System.StringComparison.Ordinal))
            {
                return _getRecipesForClientSemantic_AssistantRecipesSemanticSearch_AssistantRecipeFromAssistantRecipeEntityMapper.Map(snapshot.GetEntity<global::GraphQLClient.State.AssistantRecipeEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientSemanticResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetRecipesForClientSemanticResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> assistantRecipesSemanticSearch, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AssistantRecipesSemanticSearch = assistantRecipesSemanticSearch;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> AssistantRecipesSemanticSearch { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetRecipesForClientSemanticResultInfo(AssistantRecipesSemanticSearch, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_AssistantRecipeFromAssistantRecipeEntityMapper : global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.AssistantRecipeEntity, GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_AssistantRecipe>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.PublicUserEntity, GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Owner_PublicUser> _getRecipesForClientSemantic_AssistantRecipesSemanticSearch_Owner_PublicUserFromPublicUserEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.GroupEntity, GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups_Group> _getRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups_GroupFromGroupEntityMapper;
        public GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_AssistantRecipeFromAssistantRecipeEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.PublicUserEntity, GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Owner_PublicUser> getRecipesForClientSemantic_AssistantRecipesSemanticSearch_Owner_PublicUserFromPublicUserEntityMapper, global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.GroupEntity, GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups_Group> getRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups_GroupFromGroupEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getRecipesForClientSemantic_AssistantRecipesSemanticSearch_Owner_PublicUserFromPublicUserEntityMapper = getRecipesForClientSemantic_AssistantRecipesSemanticSearch_Owner_PublicUserFromPublicUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getRecipesForClientSemantic_AssistantRecipesSemanticSearch_Owner_PublicUserFromPublicUserEntityMapper));
            _getRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups_GroupFromGroupEntityMapper = getRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups_GroupFromGroupEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups_GroupFromGroupEntityMapper));
        }

        public GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_AssistantRecipe Map(global::GraphQLClient.State.AssistantRecipeEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_AssistantRecipe(entity.Id, entity.Name, entity.Code, entity.JetbrainsFormat, entity.PresentableFormat, entity.Keywords, entity.Imports, entity.Language, entity.IsPublic, entity.Description, entity.Shortcut, MapIGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Owner(entity.Owner, snapshot), MapNonNullableIGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_GroupsNonNullableArray(entity.Groups, snapshot));
        }

        private global::GraphQLClient.IGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Owner? MapIGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Owner(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("PublicUser", global::System.StringComparison.Ordinal))
            {
                return _getRecipesForClientSemantic_AssistantRecipesSemanticSearch_Owner_PublicUserFromPublicUserEntityMapper.Map(snapshot.GetEntity<global::GraphQLClient.State.PublicUserEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.IGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups> MapNonNullableIGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_GroupsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var @groups = new global::System.Collections.Generic.List<global::GraphQLClient.IGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                @groups.Add(MapNonNullableIGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups(child, snapshot));
            }

            return @groups;
        }

        private global::GraphQLClient.IGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups MapNonNullableIGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Group", global::System.StringComparison.Ordinal))
            {
                return _getRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups_GroupFromGroupEntityMapper.Map(snapshot.GetEntity<global::GraphQLClient.State.GroupEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Owner_PublicUserFromPublicUserEntityMapper : global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.PublicUserEntity, GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Owner_PublicUser>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Owner_PublicUserFromPublicUserEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Owner_PublicUser Map(global::GraphQLClient.State.PublicUserEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Owner_PublicUser(entity.Id, entity.DisplayName, entity.Slug, entity.HasSlug, entity.AccountType);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups_GroupFromGroupEntityMapper : global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.GroupEntity, GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups_Group>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups_GroupFromGroupEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups_Group Map(global::GraphQLClient.State.GroupEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups_Group(entity.Id, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetUserResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.GetUserResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.UserEntity, GetUser_User_User> _getUser_User_UserFromUserEntityMapper;
        public GetUserResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.UserEntity, GetUser_User_User> getUser_User_UserFromUserEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getUser_User_UserFromUserEntityMapper = getUser_User_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getUser_User_UserFromUserEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQLClient.IGetUserResult);
        public GetUserResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetUserResultInfo info)
            {
                return new GetUserResult(MapIGetUser_User(info.User, snapshot));
            }

            throw new global::System.ArgumentException("GetUserResultInfo expected.");
        }

        private global::GraphQLClient.IGetUser_User? MapIGetUser_User(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                return _getUser_User_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::GraphQLClient.State.UserEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetUserResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetUserResultInfo(global::StrawberryShake.EntityId? user, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            User = user;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId? User { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetUserResultInfo(User, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetUser_User_UserFromUserEntityMapper : global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.UserEntity, GetUser_User_User>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetUser_User_UserFromUserEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetUser_User_User Map(global::GraphQLClient.State.UserEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetUser_User_User(entity.Username);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class AddViolationToIgnoreResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.AddViolationToIgnoreResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AddViolationToIgnoreResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQLClient.IAddViolationToIgnoreResult);
        public AddViolationToIgnoreResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AddViolationToIgnoreResultInfo info)
            {
                return new AddViolationToIgnoreResult(MapIAddViolationToIgnore_AddViolationToIgnore(info.AddViolationToIgnore, snapshot));
            }

            throw new global::System.ArgumentException("AddViolationToIgnoreResultInfo expected.");
        }

        private global::GraphQLClient.IAddViolationToIgnore_AddViolationToIgnore? MapIAddViolationToIgnore_AddViolationToIgnore(global::GraphQLClient.State.ViolationIgnoreData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IAddViolationToIgnore_AddViolationToIgnore returnValue = default !;
            if (data?.__typename.Equals("ViolationIgnore", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new AddViolationToIgnore_AddViolationToIgnore_ViolationIgnore(data.Rule ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class AddViolationToIgnoreResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AddViolationToIgnoreResultInfo(global::GraphQLClient.State.ViolationIgnoreData? addViolationToIgnore, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AddViolationToIgnore = addViolationToIgnore;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::GraphQLClient.State.ViolationIgnoreData? AddViolationToIgnore { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AddViolationToIgnoreResultInfo(AddViolationToIgnore, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class RecordAccessResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.RecordAccessResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public RecordAccessResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQLClient.IRecordAccessResult);
        public RecordAccessResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is RecordAccessResultInfo info)
            {
                return new RecordAccessResult(info.RecordAccess);
            }

            throw new global::System.ArgumentException("RecordAccessResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class RecordAccessResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public RecordAccessResultInfo(global::System.String recordAccess, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            RecordAccess = recordAccess;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.String RecordAccess { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new RecordAccessResultInfo(RecordAccess, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class RecordRecipeUseResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.RecordRecipeUseResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public RecordRecipeUseResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQLClient.IRecordRecipeUseResult);
        public RecordRecipeUseResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is RecordRecipeUseResultInfo info)
            {
                return new RecordRecipeUseResult(info.RecordAccess);
            }

            throw new global::System.ArgumentException("RecordRecipeUseResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class RecordRecipeUseResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public RecordRecipeUseResultInfo(global::System.String recordAccess, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            RecordAccess = recordAccess;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.String RecordAccess { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new RecordRecipeUseResultInfo(RecordAccess, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class RemoveViolationToIgnoreResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.RemoveViolationToIgnoreResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public RemoveViolationToIgnoreResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQLClient.IRemoveViolationToIgnoreResult);
        public RemoveViolationToIgnoreResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is RemoveViolationToIgnoreResultInfo info)
            {
                return new RemoveViolationToIgnoreResult(info.RemoveViolationToIgnore);
            }

            throw new global::System.ArgumentException("RemoveViolationToIgnoreResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class RemoveViolationToIgnoreResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public RemoveViolationToIgnoreResultInfo(global::System.String removeViolationToIgnore, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            RemoveViolationToIgnore = removeViolationToIgnore;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.String RemoveViolationToIgnore { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new RemoveViolationToIgnoreResultInfo(RemoveViolationToIgnore, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetFileDataBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IGetFileDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IGetFileDataResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::GraphQLClient.ViolationCategory> _violationCategoryParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::GraphQLClient.LanguageEnumeration> _languageEnumerationParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetFileDataBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IGetFileDataResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _violationCategoryParser = serializerResolver.GetLeafValueParser<global::System.String, global::GraphQLClient.ViolationCategory>("ViolationCategory") ?? throw new global::System.ArgumentException("No serializer for type `ViolationCategory` found.");
            _languageEnumerationParser = serializerResolver.GetLeafValueParser<global::System.String, global::GraphQLClient.LanguageEnumeration>("LanguageEnumeration") ?? throw new global::System.ArgumentException("No serializer for type `LanguageEnumeration` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetFileDataResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetFileDataResult Result, GetFileDataResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetFileDataResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetFileDataResult, GetFileDataResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? projectId = default !;
            _entityStore.Update(session =>
            {
                projectId = UpdateIGetFileData_ProjectEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "project"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetFileDataResultInfo(projectId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIGetFileData_ProjectEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Project", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::GraphQLClient.State.ProjectEntity? entity))
                {
                    session.SetEntity(entityId, new global::GraphQLClient.State.ProjectEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), UpdateNonNullableIGetFileData_Project_AnalysesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "analyses"), entityIds), entity.Owner, entity.Group, entity.ViolationsToIgnore));
                }
                else
                {
                    session.SetEntity(entityId, new global::GraphQLClient.State.ProjectEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), UpdateNonNullableIGetFileData_Project_AnalysesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "analyses"), entityIds), default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int64 DeserializeNonNullableInt64(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _longParser.Parse(obj.Value.GetInt64()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetFileData_Project_AnalysesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var analysiss = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                analysiss.Add(UpdateNonNullableIGetFileData_Project_AnalysesEntity(session, child, entityIds));
            }

            return analysiss;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetFileData_Project_AnalysesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Analysis", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::GraphQLClient.State.AnalysisEntity? entity))
                {
                    session.SetEntity(entityId, new global::GraphQLClient.State.AnalysisEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableIGetFileData_Project_Analyses_ViolationsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "violations")), DeserializeNonNullableIGetFileData_Project_Analyses_LongFunctionsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "longFunctions")), DeserializeNonNullableIGetFileData_Project_Analyses_ComplexFunctionsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "complexFunctions")), UpdateNonNullableIGetFileData_Project_Analyses_DuplicatesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "duplicates"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::GraphQLClient.State.AnalysisEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableIGetFileData_Project_Analyses_ViolationsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "violations")), DeserializeNonNullableIGetFileData_Project_Analyses_LongFunctionsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "longFunctions")), DeserializeNonNullableIGetFileData_Project_Analyses_ComplexFunctionsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "complexFunctions")), UpdateNonNullableIGetFileData_Project_Analyses_DuplicatesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "duplicates"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.State.ViolationData> DeserializeNonNullableIGetFileData_Project_Analyses_ViolationsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var violations = new global::System.Collections.Generic.List<global::GraphQLClient.State.ViolationData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                violations.Add(DeserializeNonNullableIGetFileData_Project_Analyses_Violations(child));
            }

            return violations;
        }

        private global::GraphQLClient.State.ViolationData DeserializeNonNullableIGetFileData_Project_Analyses_Violations(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Violation", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQLClient.State.ViolationData(typename, line: DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "line")), category: DeserializeNonNullableViolationCategory(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "category")), severity: DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "severity")), description: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), filename: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "filename")), lineCount: DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lineCount")), language: DeserializeLanguageEnumeration(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "language")), tool: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "tool")), rule: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rule")), ruleUrl: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ruleUrl")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::GraphQLClient.ViolationCategory DeserializeNonNullableViolationCategory(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _violationCategoryParser.Parse(obj.Value.GetString()!);
        }

        private global::GraphQLClient.LanguageEnumeration? DeserializeLanguageEnumeration(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _languageEnumerationParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.State.ComplexFunctionData> DeserializeNonNullableIGetFileData_Project_Analyses_LongFunctionsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var complexFunctions = new global::System.Collections.Generic.List<global::GraphQLClient.State.ComplexFunctionData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                complexFunctions.Add(DeserializeNonNullableIGetFileData_Project_Analyses_LongFunctions(child));
            }

            return complexFunctions;
        }

        private global::GraphQLClient.State.ComplexFunctionData DeserializeNonNullableIGetFileData_Project_Analyses_LongFunctions(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ComplexFunction", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQLClient.State.ComplexFunctionData(typename, filename: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "filename")), functionName: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "functionName")), complexity: DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "complexity")), length: DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "length")), lineStart: DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lineStart")), lineEnd: DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lineEnd")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.State.ComplexFunctionData> DeserializeNonNullableIGetFileData_Project_Analyses_ComplexFunctionsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var complexFunctions = new global::System.Collections.Generic.List<global::GraphQLClient.State.ComplexFunctionData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                complexFunctions.Add(DeserializeNonNullableIGetFileData_Project_Analyses_ComplexFunctions(child));
            }

            return complexFunctions;
        }

        private global::GraphQLClient.State.ComplexFunctionData DeserializeNonNullableIGetFileData_Project_Analyses_ComplexFunctions(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ComplexFunction", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQLClient.State.ComplexFunctionData(typename, filename: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "filename")), functionName: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "functionName")), complexity: DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "complexity")), length: DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "length")), lineStart: DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lineStart")), lineEnd: DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lineEnd")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetFileData_Project_Analyses_DuplicatesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var duplicates = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                duplicates.Add(UpdateNonNullableIGetFileData_Project_Analyses_DuplicatesEntity(session, child, entityIds));
            }

            return duplicates;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetFileData_Project_Analyses_DuplicatesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Duplicate", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::GraphQLClient.State.DuplicateEntity? entity))
                {
                    session.SetEntity(entityId, new global::GraphQLClient.State.DuplicateEntity(DeserializeNonNullableIGetFileData_Project_Analyses_Duplicates_OccurrencesNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "occurrences"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::GraphQLClient.State.DuplicateEntity(DeserializeNonNullableIGetFileData_Project_Analyses_Duplicates_OccurrencesNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "occurrences"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.State.DuplicateOccurrenceData> DeserializeNonNullableIGetFileData_Project_Analyses_Duplicates_OccurrencesNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var duplicateOccurrences = new global::System.Collections.Generic.List<global::GraphQLClient.State.DuplicateOccurrenceData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                duplicateOccurrences.Add(DeserializeNonNullableIGetFileData_Project_Analyses_Duplicates_Occurrences(child));
            }

            return duplicateOccurrences;
        }

        private global::GraphQLClient.State.DuplicateOccurrenceData DeserializeNonNullableIGetFileData_Project_Analyses_Duplicates_Occurrences(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DuplicateOccurrence", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQLClient.State.DuplicateOccurrenceData(typename, line: DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "line")), filename: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "filename")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetProjectsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IGetProjectsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IGetProjectsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::GraphQLClient.LanguageEnumeration> _languageEnumerationParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetProjectsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IGetProjectsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _languageEnumerationParser = serializerResolver.GetLeafValueParser<global::System.String, global::GraphQLClient.LanguageEnumeration>("LanguageEnumeration") ?? throw new global::System.ArgumentException("No serializer for type `LanguageEnumeration` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetProjectsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetProjectsResult Result, GetProjectsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetProjectsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetProjectsResult, GetProjectsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> projectsId = default !;
            _entityStore.Update(session =>
            {
                projectsId = UpdateNonNullableIGetProjects_ProjectsEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "projects"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetProjectsResultInfo(projectsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetProjects_ProjectsEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var projects = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                projects.Add(UpdateNonNullableIGetProjects_ProjectsEntity(session, child, entityIds));
            }

            return projects;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetProjects_ProjectsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Project", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::GraphQLClient.State.ProjectEntity? entity))
                {
                    session.SetEntity(entityId, new global::GraphQLClient.State.ProjectEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Analyses, UpdateIGetProjects_Projects_OwnerEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "owner"), entityIds), UpdateIGetProjects_Projects_GroupEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "group"), entityIds), DeserializeNonNullableIGetProjects_Projects_ViolationsToIgnoreNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "violationsToIgnore"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::GraphQLClient.State.ProjectEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, UpdateIGetProjects_Projects_OwnerEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "owner"), entityIds), UpdateIGetProjects_Projects_GroupEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "group"), entityIds), DeserializeNonNullableIGetProjects_Projects_ViolationsToIgnoreNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "violationsToIgnore"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int64 DeserializeNonNullableInt64(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _longParser.Parse(obj.Value.GetInt64()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId? UpdateIGetProjects_Projects_OwnerEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::GraphQLClient.State.UserEntity? entity))
                {
                    session.SetEntity(entityId, new global::GraphQLClient.State.UserEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "username"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::GraphQLClient.State.UserEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "username"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIGetProjects_Projects_GroupEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Group", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::GraphQLClient.State.GroupEntity? entity))
                {
                    session.SetEntity(entityId, new global::GraphQLClient.State.GroupEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::GraphQLClient.State.GroupEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQLClient.State.ViolationIgnoreData> DeserializeNonNullableIGetProjects_Projects_ViolationsToIgnoreNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var violationIgnores = new global::System.Collections.Generic.List<global::GraphQLClient.State.ViolationIgnoreData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                violationIgnores.Add(DeserializeNonNullableIGetProjects_Projects_ViolationsToIgnore(child));
            }

            return violationIgnores;
        }

        private global::GraphQLClient.State.ViolationIgnoreData DeserializeNonNullableIGetProjects_Projects_ViolationsToIgnore(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ViolationIgnore", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQLClient.State.ViolationIgnoreData(typename, filename: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "filename")), description: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), prefix: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "prefix")), rule: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rule")), tool: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "tool")), language: DeserializeLanguageEnumeration(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "language")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::GraphQLClient.LanguageEnumeration? DeserializeLanguageEnumeration(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _languageEnumerationParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IGetRecipesForClientResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IGetRecipesForClientResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::GraphQLClient.LanguageEnumeration> _languageEnumerationParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        public GetRecipesForClientBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IGetRecipesForClientResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _languageEnumerationParser = serializerResolver.GetLeafValueParser<global::System.String, global::GraphQLClient.LanguageEnumeration>("LanguageEnumeration") ?? throw new global::System.ArgumentException("No serializer for type `LanguageEnumeration` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetRecipesForClientResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetRecipesForClientResult Result, GetRecipesForClientResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetRecipesForClientResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetRecipesForClientResult, GetRecipesForClientResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> getRecipesForClientId = default !;
            _entityStore.Update(session =>
            {
                getRecipesForClientId = UpdateNonNullableIGetRecipesForClient_GetRecipesForClientEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "getRecipesForClient"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetRecipesForClientResultInfo(getRecipesForClientId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetRecipesForClient_GetRecipesForClientEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var assistantRecipes = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                assistantRecipes.Add(UpdateNonNullableIGetRecipesForClient_GetRecipesForClientEntity(session, child, entityIds));
            }

            return assistantRecipes;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetRecipesForClient_GetRecipesForClientEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("AssistantRecipe", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::GraphQLClient.State.AssistantRecipeEntity? entity))
                {
                    session.SetEntity(entityId, new global::GraphQLClient.State.AssistantRecipeEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "jetbrainsFormat")), DeserializeNonNullableStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "keywords")), DeserializeNonNullableStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "imports")), DeserializeNonNullableLanguageEnumeration(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "language")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "shortcut")), entity.PresentableFormat, entity.IsPublic, entity.Owner, entity.Groups));
                }
                else
                {
                    session.SetEntity(entityId, new global::GraphQLClient.State.AssistantRecipeEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "jetbrainsFormat")), DeserializeNonNullableStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "keywords")), DeserializeNonNullableStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "imports")), DeserializeNonNullableLanguageEnumeration(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "language")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "shortcut")), default !, default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int64 DeserializeNonNullableInt64(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _longParser.Parse(obj.Value.GetInt64()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String> DeserializeNonNullableStringNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var @strings = new global::System.Collections.Generic.List<global::System.String>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @strings.Add(DeserializeNonNullableString(child));
            }

            return @strings;
        }

        private global::GraphQLClient.LanguageEnumeration DeserializeNonNullableLanguageEnumeration(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _languageEnumerationParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientByShortcutBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IGetRecipesForClientByShortcutResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IGetRecipesForClientByShortcutResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::GraphQLClient.LanguageEnumeration> _languageEnumerationParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        public GetRecipesForClientByShortcutBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IGetRecipesForClientByShortcutResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _languageEnumerationParser = serializerResolver.GetLeafValueParser<global::System.String, global::GraphQLClient.LanguageEnumeration>("LanguageEnumeration") ?? throw new global::System.ArgumentException("No serializer for type `LanguageEnumeration` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetRecipesForClientByShortcutResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetRecipesForClientByShortcutResult Result, GetRecipesForClientByShortcutResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetRecipesForClientByShortcutResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetRecipesForClientByShortcutResult, GetRecipesForClientByShortcutResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> getRecipesForClientByShortcutId = default !;
            _entityStore.Update(session =>
            {
                getRecipesForClientByShortcutId = UpdateNonNullableIGetRecipesForClientByShortcut_GetRecipesForClientByShortcutEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "getRecipesForClientByShortcut"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetRecipesForClientByShortcutResultInfo(getRecipesForClientByShortcutId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetRecipesForClientByShortcut_GetRecipesForClientByShortcutEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var assistantRecipes = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                assistantRecipes.Add(UpdateNonNullableIGetRecipesForClientByShortcut_GetRecipesForClientByShortcutEntity(session, child, entityIds));
            }

            return assistantRecipes;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetRecipesForClientByShortcut_GetRecipesForClientByShortcutEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("AssistantRecipe", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::GraphQLClient.State.AssistantRecipeEntity? entity))
                {
                    session.SetEntity(entityId, new global::GraphQLClient.State.AssistantRecipeEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), entity.JetbrainsFormat, DeserializeNonNullableStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "keywords")), DeserializeNonNullableStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "imports")), DeserializeNonNullableLanguageEnumeration(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "language")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "shortcut")), entity.PresentableFormat, entity.IsPublic, entity.Owner, entity.Groups));
                }
                else
                {
                    session.SetEntity(entityId, new global::GraphQLClient.State.AssistantRecipeEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), default !, DeserializeNonNullableStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "keywords")), DeserializeNonNullableStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "imports")), DeserializeNonNullableLanguageEnumeration(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "language")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "shortcut")), default !, default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int64 DeserializeNonNullableInt64(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _longParser.Parse(obj.Value.GetInt64()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String> DeserializeNonNullableStringNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var @strings = new global::System.Collections.Generic.List<global::System.String>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @strings.Add(DeserializeNonNullableString(child));
            }

            return @strings;
        }

        private global::GraphQLClient.LanguageEnumeration DeserializeNonNullableLanguageEnumeration(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _languageEnumerationParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientByShortcutLastTimestampBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IGetRecipesForClientByShortcutLastTimestampResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IGetRecipesForClientByShortcutLastTimestampResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::GraphQLClient.LanguageEnumeration> _languageEnumerationParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        public GetRecipesForClientByShortcutLastTimestampBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IGetRecipesForClientByShortcutLastTimestampResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _languageEnumerationParser = serializerResolver.GetLeafValueParser<global::System.String, global::GraphQLClient.LanguageEnumeration>("LanguageEnumeration") ?? throw new global::System.ArgumentException("No serializer for type `LanguageEnumeration` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetRecipesForClientByShortcutLastTimestampResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetRecipesForClientByShortcutLastTimestampResult Result, GetRecipesForClientByShortcutLastTimestampResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetRecipesForClientByShortcutLastTimestampResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetRecipesForClientByShortcutLastTimestampResult, GetRecipesForClientByShortcutLastTimestampResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetRecipesForClientByShortcutLastTimestampResultInfo(DeserializeInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "getRecipesForClientByShortcutLastTimestamp")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Int64? DeserializeInt64(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _longParser.Parse(obj.Value.GetInt64()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetRecipesForClientSemanticBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IGetRecipesForClientSemanticResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IGetRecipesForClientSemanticResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::GraphQLClient.LanguageEnumeration> _languageEnumerationParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::GraphQLClient.AccountType> _accountTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        public GetRecipesForClientSemanticBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IGetRecipesForClientSemanticResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _languageEnumerationParser = serializerResolver.GetLeafValueParser<global::System.String, global::GraphQLClient.LanguageEnumeration>("LanguageEnumeration") ?? throw new global::System.ArgumentException("No serializer for type `LanguageEnumeration` found.");
            _accountTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::GraphQLClient.AccountType>("AccountType") ?? throw new global::System.ArgumentException("No serializer for type `AccountType` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetRecipesForClientSemanticResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetRecipesForClientSemanticResult Result, GetRecipesForClientSemanticResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetRecipesForClientSemanticResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetRecipesForClientSemanticResult, GetRecipesForClientSemanticResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> assistantRecipesSemanticSearchId = default !;
            _entityStore.Update(session =>
            {
                assistantRecipesSemanticSearchId = UpdateNonNullableIGetRecipesForClientSemantic_AssistantRecipesSemanticSearchEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "assistantRecipesSemanticSearch"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetRecipesForClientSemanticResultInfo(assistantRecipesSemanticSearchId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetRecipesForClientSemantic_AssistantRecipesSemanticSearchEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var assistantRecipes = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                assistantRecipes.Add(UpdateNonNullableIGetRecipesForClientSemantic_AssistantRecipesSemanticSearchEntity(session, child, entityIds));
            }

            return assistantRecipes;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetRecipesForClientSemantic_AssistantRecipesSemanticSearchEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("AssistantRecipe", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::GraphQLClient.State.AssistantRecipeEntity? entity))
                {
                    session.SetEntity(entityId, new global::GraphQLClient.State.AssistantRecipeEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "jetbrainsFormat")), DeserializeNonNullableStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "keywords")), DeserializeNonNullableStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "imports")), DeserializeNonNullableLanguageEnumeration(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "language")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "shortcut")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "presentableFormat")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isPublic")), UpdateIGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_OwnerEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "owner"), entityIds), UpdateNonNullableIGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_GroupsEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "groups"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::GraphQLClient.State.AssistantRecipeEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "jetbrainsFormat")), DeserializeNonNullableStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "keywords")), DeserializeNonNullableStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "imports")), DeserializeNonNullableLanguageEnumeration(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "language")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "shortcut")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "presentableFormat")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isPublic")), UpdateIGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_OwnerEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "owner"), entityIds), UpdateNonNullableIGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_GroupsEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "groups"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int64 DeserializeNonNullableInt64(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _longParser.Parse(obj.Value.GetInt64()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String> DeserializeNonNullableStringNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var @strings = new global::System.Collections.Generic.List<global::System.String>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @strings.Add(DeserializeNonNullableString(child));
            }

            return @strings;
        }

        private global::GraphQLClient.LanguageEnumeration DeserializeNonNullableLanguageEnumeration(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _languageEnumerationParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId? UpdateIGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_OwnerEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("PublicUser", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::GraphQLClient.State.PublicUserEntity? entity))
                {
                    session.SetEntity(entityId, new global::GraphQLClient.State.PublicUserEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "displayName")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "slug")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasSlug")), DeserializeNonNullableAccountType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "accountType"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::GraphQLClient.State.PublicUserEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "displayName")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "slug")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasSlug")), DeserializeNonNullableAccountType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "accountType"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::GraphQLClient.AccountType DeserializeNonNullableAccountType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _accountTypeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_GroupsEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var @groups = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @groups.Add(UpdateNonNullableIGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_GroupsEntity(session, child, entityIds));
            }

            return @groups;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetRecipesForClientSemantic_AssistantRecipesSemanticSearch_GroupsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Group", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::GraphQLClient.State.GroupEntity? entity))
                {
                    session.SetEntity(entityId, new global::GraphQLClient.State.GroupEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::GraphQLClient.State.GroupEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class GetUserBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IGetUserResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IGetUserResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetUserBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IGetUserResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetUserResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetUserResult Result, GetUserResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetUserResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetUserResult, GetUserResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? userId = default !;
            _entityStore.Update(session =>
            {
                userId = UpdateIGetUser_UserEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "user"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetUserResultInfo(userId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIGetUser_UserEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::GraphQLClient.State.UserEntity? entity))
                {
                    session.SetEntity(entityId, new global::GraphQLClient.State.UserEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "username"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::GraphQLClient.State.UserEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "username"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class AddViolationToIgnoreBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IAddViolationToIgnoreResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IAddViolationToIgnoreResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::GraphQLClient.LanguageEnumeration> _languageEnumerationParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public AddViolationToIgnoreBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IAddViolationToIgnoreResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _languageEnumerationParser = serializerResolver.GetLeafValueParser<global::System.String, global::GraphQLClient.LanguageEnumeration>("LanguageEnumeration") ?? throw new global::System.ArgumentException("No serializer for type `LanguageEnumeration` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IAddViolationToIgnoreResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAddViolationToIgnoreResult Result, AddViolationToIgnoreResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IAddViolationToIgnoreResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAddViolationToIgnoreResult, AddViolationToIgnoreResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AddViolationToIgnoreResultInfo(DeserializeIAddViolationToIgnore_AddViolationToIgnore(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addViolationToIgnore")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::GraphQLClient.State.ViolationIgnoreData? DeserializeIAddViolationToIgnore_AddViolationToIgnore(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ViolationIgnore", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQLClient.State.ViolationIgnoreData(typename, rule: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rule")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class RecordAccessBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IRecordAccessResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IRecordAccessResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::GraphQLClient.AccessType> _accessTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::GraphQLClient.ActionType> _actionTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public RecordAccessBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IRecordAccessResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _accessTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::GraphQLClient.AccessType>("AccessType") ?? throw new global::System.ArgumentException("No serializer for type `AccessType` found.");
            _actionTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::GraphQLClient.ActionType>("ActionType") ?? throw new global::System.ArgumentException("No serializer for type `ActionType` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IRecordAccessResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IRecordAccessResult Result, RecordAccessResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IRecordAccessResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IRecordAccessResult, RecordAccessResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new RecordAccessResultInfo(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "recordAccess")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class RecordRecipeUseBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IRecordRecipeUseResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IRecordRecipeUseResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public RecordRecipeUseBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IRecordRecipeUseResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IRecordRecipeUseResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IRecordRecipeUseResult Result, RecordRecipeUseResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IRecordRecipeUseResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IRecordRecipeUseResult, RecordRecipeUseResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new RecordRecipeUseResultInfo(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "recordAccess")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class RemoveViolationToIgnoreBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IRemoveViolationToIgnoreResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IRemoveViolationToIgnoreResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::GraphQLClient.LanguageEnumeration> _languageEnumerationParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public RemoveViolationToIgnoreBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IRemoveViolationToIgnoreResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _languageEnumerationParser = serializerResolver.GetLeafValueParser<global::System.String, global::GraphQLClient.LanguageEnumeration>("LanguageEnumeration") ?? throw new global::System.ArgumentException("No serializer for type `LanguageEnumeration` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IRemoveViolationToIgnoreResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IRemoveViolationToIgnoreResult Result, RemoveViolationToIgnoreResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IRemoveViolationToIgnoreResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IRemoveViolationToIgnoreResult, RemoveViolationToIgnoreResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new RemoveViolationToIgnoreResultInfo(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "removeViolationToIgnore")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    ///<summary>Map a violation reported by code inspector</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class ViolationData
    {
        public ViolationData(global::System.String __typename, global::System.Int64? line = default !, global::GraphQLClient.ViolationCategory? category = default !, global::System.Int64? severity = default !, global::System.String? description = default !, global::System.String? filename = default !, global::System.Int64? lineCount = default !, global::GraphQLClient.LanguageEnumeration? language = default !, global::System.String? tool = default !, global::System.String? rule = default !, global::System.String? ruleUrl = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Line = line;
            Category = category;
            Severity = severity;
            Description = description;
            Filename = filename;
            LineCount = lineCount;
            Language = language;
            Tool = tool;
            Rule = rule;
            RuleUrl = ruleUrl;
        }

        public global::System.String __typename { get; }

        ///<summary>line where the violation occured</summary>
        public global::System.Int64? Line { get; }

        ///<summary>category of the violation</summary>
        public global::GraphQLClient.ViolationCategory? Category { get; }

        ///<summary>severity of the violation</summary>
        public global::System.Int64? Severity { get; }

        ///<summary>description of the violation</summary>
        public global::System.String? Description { get; }

        ///<summary>name of the project</summary>
        public global::System.String? Filename { get; }

        ///<summary>number of lines (unsupported now)</summary>
        public global::System.Int64? LineCount { get; }

        ///<summary>language related to this violation</summary>
        public global::GraphQLClient.LanguageEnumeration? Language { get; }

        ///<summary>language related to this violation</summary>
        public global::System.String? Tool { get; }

        ///<summary>language related to this violation</summary>
        public global::System.String? Rule { get; }

        ///<summary>URL helper to fix the violation</summary>
        public global::System.String? RuleUrl { get; }
    }

    ///<summary>Function that is complex, either with the cyclomatic or maintanability complexity</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class ComplexFunctionData
    {
        public ComplexFunctionData(global::System.String __typename, global::System.String? filename = default !, global::System.String? functionName = default !, global::System.Int64? complexity = default !, global::System.Int64? length = default !, global::System.Int64? lineStart = default !, global::System.Int64? lineEnd = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Filename = filename;
            FunctionName = functionName;
            Complexity = complexity;
            Length = length;
            LineStart = lineStart;
            LineEnd = lineEnd;
        }

        public global::System.String __typename { get; }

        ///<summary>filename</summary>
        public global::System.String? Filename { get; }

        ///<summary>filename</summary>
        public global::System.String? FunctionName { get; }

        ///<summary>cyclomatic complexity</summary>
        public global::System.Int64? Complexity { get; }

        ///<summary>filename</summary>
        public global::System.Int64? Length { get; }

        ///<summary>filename</summary>
        public global::System.Int64? LineStart { get; }

        ///<summary>filename</summary>
        public global::System.Int64? LineEnd { get; }
    }

    ///<summary>Information about duplicate occurrence (where it is in your code)</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class DuplicateOccurrenceData
    {
        public DuplicateOccurrenceData(global::System.String __typename, global::System.Int64? line = default !, global::System.String? filename = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Line = line;
            Filename = filename;
        }

        public global::System.String __typename { get; }

        ///<summary>number of duplicated lines</summary>
        public global::System.Int64? Line { get; }

        ///<summary>where the duplicate is (what file)</summary>
        public global::System.String? Filename { get; }
    }

    ///<summary>Violation to ignore for a particular project</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class ViolationIgnoreData
    {
        public ViolationIgnoreData(global::System.String __typename, global::System.String? filename = default !, global::System.String? description = default !, global::System.String? prefix = default !, global::System.String? rule = default !, global::System.String? tool = default !, global::GraphQLClient.LanguageEnumeration? language = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Filename = filename;
            Description = description;
            Prefix = prefix;
            Rule = rule;
            Tool = tool;
            Language = language;
        }

        public global::System.String __typename { get; }

        ///<summary>filename of the violation to ignore</summary>
        public global::System.String? Filename { get; }

        ///<summary>description of the violation</summary>
        public global::System.String? Description { get; }

        ///<summary>prefix to ignore</summary>
        public global::System.String? Prefix { get; }

        ///<summary>when the repository was created</summary>
        public global::System.String? Rule { get; }

        ///<summary>tool that detects this violation</summary>
        public global::System.String? Tool { get; }

        ///<summary>language of the violation</summary>
        public global::GraphQLClient.LanguageEnumeration? Language { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class CodigaGraphQLClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "Project" => ParseProjectEntityId(obj, __typename),
                "Analysis" => ParseAnalysisEntityId(obj, __typename),
                "Duplicate" => ParseDuplicateEntityId(obj, __typename),
                "User" => ParseUserEntityId(obj, __typename),
                "Group" => ParseGroupEntityId(obj, __typename),
                "AssistantRecipe" => ParseAssistantRecipeEntityId(obj, __typename),
                "PublicUser" => ParsePublicUserEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "Project" => FormatProjectEntityId(entityId),
                "Analysis" => FormatAnalysisEntityId(entityId),
                "Duplicate" => FormatDuplicateEntityId(entityId),
                "User" => FormatUserEntityId(entityId),
                "Group" => FormatGroupEntityId(entityId),
                "AssistantRecipe" => FormatAssistantRecipeEntityId(entityId),
                "PublicUser" => FormatPublicUserEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseProjectEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatProjectEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseAnalysisEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatAnalysisEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseDuplicateEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatDuplicateEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseUserEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatUserEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseGroupEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatGroupEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseAssistantRecipeEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatAssistantRecipeEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePublicUserEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatPublicUserEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public partial class CodigaGraphQLClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public CodigaGraphQLClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.1.0")]
    public static partial class CodigaGraphQLClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::GraphQLClient.State.CodigaGraphQLClientStoreAccessor> AddCodigaGraphQLClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::GraphQLClient.State.CodigaGraphQLClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.GetFileDataQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.GetProjectsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.GetRecipesForClientQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.GetRecipesForClientByShortcutQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.GetRecipesForClientByShortcutLastTimestampQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.GetRecipesForClientSemanticQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.GetUserQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.AddViolationToIgnoreMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.RecordAccessMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.RecordRecipeUseMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.RemoveViolationToIgnoreMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.CodigaGraphQLClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.ICodigaGraphQLClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::GraphQLClient.State.CodigaGraphQLClientStoreAccessor>("CodigaGraphQLClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("CodigaGraphQLClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.ProjectEntity, global::GraphQLClient.GetFileData_Project_Project>, global::GraphQLClient.State.GetFileData_Project_ProjectFromProjectEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.AnalysisEntity, global::GraphQLClient.GetFileData_Project_Analyses_Analysis>, global::GraphQLClient.State.GetFileData_Project_Analyses_AnalysisFromAnalysisEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.DuplicateEntity, global::GraphQLClient.GetFileData_Project_Analyses_Duplicates_Duplicate>, global::GraphQLClient.State.GetFileData_Project_Analyses_Duplicates_DuplicateFromDuplicateEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.ProjectEntity, global::GraphQLClient.GetProjects_Projects_Project>, global::GraphQLClient.State.GetProjects_Projects_ProjectFromProjectEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.UserEntity, global::GraphQLClient.GetProjects_Projects_Owner_User>, global::GraphQLClient.State.GetProjects_Projects_Owner_UserFromUserEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.GroupEntity, global::GraphQLClient.GetProjects_Projects_Group_Group>, global::GraphQLClient.State.GetProjects_Projects_Group_GroupFromGroupEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.AssistantRecipeEntity, global::GraphQLClient.GetRecipesForClient_GetRecipesForClient_AssistantRecipe>, global::GraphQLClient.State.GetRecipesForClient_GetRecipesForClient_AssistantRecipeFromAssistantRecipeEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.AssistantRecipeEntity, global::GraphQLClient.GetRecipesForClientByShortcut_GetRecipesForClientByShortcut_AssistantRecipe>, global::GraphQLClient.State.GetRecipesForClientByShortcut_GetRecipesForClientByShortcut_AssistantRecipeFromAssistantRecipeEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.AssistantRecipeEntity, global::GraphQLClient.GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_AssistantRecipe>, global::GraphQLClient.State.GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_AssistantRecipeFromAssistantRecipeEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.PublicUserEntity, global::GraphQLClient.GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Owner_PublicUser>, global::GraphQLClient.State.GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Owner_PublicUserFromPublicUserEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.GroupEntity, global::GraphQLClient.GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups_Group>, global::GraphQLClient.State.GetRecipesForClientSemantic_AssistantRecipesSemanticSearch_Groups_GroupFromGroupEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::GraphQLClient.State.UserEntity, global::GraphQLClient.GetUser_User_User>, global::GraphQLClient.State.GetUser_User_UserFromUserEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::GraphQLClient.ViolationCategorySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::GraphQLClient.LanguageEnumerationSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::GraphQLClient.AccountTypeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::GraphQLClient.AccessTypeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::GraphQLClient.ActionTypeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IGetFileDataResult>, global::GraphQLClient.State.GetFileDataResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IGetFileDataResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.IGetFileDataQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IGetFileDataResult>, global::GraphQLClient.State.GetFileDataBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQLClient.IGetFileDataResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQLClient.IGetFileDataResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IGetFileDataResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClient.GetFileDataQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClient.IGetFileDataQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.GetFileDataQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IGetProjectsResult>, global::GraphQLClient.State.GetProjectsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IGetProjectsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.IGetProjectsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IGetProjectsResult>, global::GraphQLClient.State.GetProjectsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQLClient.IGetProjectsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQLClient.IGetProjectsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IGetProjectsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClient.GetProjectsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClient.IGetProjectsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.GetProjectsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IGetRecipesForClientResult>, global::GraphQLClient.State.GetRecipesForClientResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IGetRecipesForClientResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.IGetRecipesForClientQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IGetRecipesForClientResult>, global::GraphQLClient.State.GetRecipesForClientBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQLClient.IGetRecipesForClientResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQLClient.IGetRecipesForClientResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IGetRecipesForClientResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClient.GetRecipesForClientQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClient.IGetRecipesForClientQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.GetRecipesForClientQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IGetRecipesForClientByShortcutResult>, global::GraphQLClient.State.GetRecipesForClientByShortcutResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IGetRecipesForClientByShortcutResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.IGetRecipesForClientByShortcutQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IGetRecipesForClientByShortcutResult>, global::GraphQLClient.State.GetRecipesForClientByShortcutBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQLClient.IGetRecipesForClientByShortcutResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQLClient.IGetRecipesForClientByShortcutResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IGetRecipesForClientByShortcutResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClient.GetRecipesForClientByShortcutQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClient.IGetRecipesForClientByShortcutQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.GetRecipesForClientByShortcutQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IGetRecipesForClientByShortcutLastTimestampResult>, global::GraphQLClient.State.GetRecipesForClientByShortcutLastTimestampResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IGetRecipesForClientByShortcutLastTimestampResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.IGetRecipesForClientByShortcutLastTimestampQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IGetRecipesForClientByShortcutLastTimestampResult>, global::GraphQLClient.State.GetRecipesForClientByShortcutLastTimestampBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQLClient.IGetRecipesForClientByShortcutLastTimestampResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQLClient.IGetRecipesForClientByShortcutLastTimestampResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IGetRecipesForClientByShortcutLastTimestampResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClient.GetRecipesForClientByShortcutLastTimestampQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClient.IGetRecipesForClientByShortcutLastTimestampQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.GetRecipesForClientByShortcutLastTimestampQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IGetRecipesForClientSemanticResult>, global::GraphQLClient.State.GetRecipesForClientSemanticResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IGetRecipesForClientSemanticResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.IGetRecipesForClientSemanticQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IGetRecipesForClientSemanticResult>, global::GraphQLClient.State.GetRecipesForClientSemanticBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQLClient.IGetRecipesForClientSemanticResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQLClient.IGetRecipesForClientSemanticResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IGetRecipesForClientSemanticResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClient.GetRecipesForClientSemanticQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClient.IGetRecipesForClientSemanticQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.GetRecipesForClientSemanticQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IGetUserResult>, global::GraphQLClient.State.GetUserResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IGetUserResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.IGetUserQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IGetUserResult>, global::GraphQLClient.State.GetUserBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQLClient.IGetUserResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQLClient.IGetUserResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IGetUserResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClient.GetUserQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClient.IGetUserQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.GetUserQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IAddViolationToIgnoreResult>, global::GraphQLClient.State.AddViolationToIgnoreResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IAddViolationToIgnoreResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.IAddViolationToIgnoreMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IAddViolationToIgnoreResult>, global::GraphQLClient.State.AddViolationToIgnoreBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQLClient.IAddViolationToIgnoreResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQLClient.IAddViolationToIgnoreResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IAddViolationToIgnoreResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClient.AddViolationToIgnoreMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClient.IAddViolationToIgnoreMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.AddViolationToIgnoreMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IRecordAccessResult>, global::GraphQLClient.State.RecordAccessResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IRecordAccessResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.IRecordAccessMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IRecordAccessResult>, global::GraphQLClient.State.RecordAccessBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQLClient.IRecordAccessResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQLClient.IRecordAccessResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IRecordAccessResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClient.RecordAccessMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClient.IRecordAccessMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.RecordAccessMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IRecordRecipeUseResult>, global::GraphQLClient.State.RecordRecipeUseResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IRecordRecipeUseResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.IRecordRecipeUseMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IRecordRecipeUseResult>, global::GraphQLClient.State.RecordRecipeUseBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQLClient.IRecordRecipeUseResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQLClient.IRecordRecipeUseResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IRecordRecipeUseResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClient.RecordRecipeUseMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClient.IRecordRecipeUseMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.RecordRecipeUseMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IRemoveViolationToIgnoreResult>, global::GraphQLClient.State.RemoveViolationToIgnoreResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClient.IRemoveViolationToIgnoreResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.IRemoveViolationToIgnoreMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IRemoveViolationToIgnoreResult>, global::GraphQLClient.State.RemoveViolationToIgnoreBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQLClient.IRemoveViolationToIgnoreResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQLClient.IRemoveViolationToIgnoreResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClient.IRemoveViolationToIgnoreResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClient.RemoveViolationToIgnoreMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClient.IRemoveViolationToIgnoreMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.RemoveViolationToIgnoreMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::GraphQLClient.State.CodigaGraphQLClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClient.CodigaGraphQLClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClient.ICodigaGraphQLClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClient.CodigaGraphQLClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
